<?php
/**
 * @category   Php4u
 * @package    Php4u_BlastLuceneSearch
 * @author     Marcin Szterling <marcin@php4u.co.uk>
 * @copyright  Php4u Marcin Szterling (c) 2013
 * @license http://php4u.co.uk/licence/
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * Any form of ditribution, sell, transfer, reverse engineering forbidden - see licence above
 *
 * Code was obfusacted due to previous licence violations
 */ 
$_F=__FILE__;$_X="JF9GPV9fRklMRV9fOyRfWD0iSkY5R1BWOWZSa2xNUlY5Zk95UmZXRDBpU2tZNVIxQldPV1pTYTJ4TlVsWTVaazk1VW1aWFJEQnBVMnRaTlZJeFFsZFBWMXBUWVRKNFRsVnNXVFZhYXprMVZXMWFXRkpFUW5CVk1uUmFUbFpKZUZGc1pGQldNWEJVV1ZSS05GUnNWbk5YVkZaaFlYcHJNVlpYTVdGWFJrcEZVVzVDVmsxdVVtRlViRnBLWlVaR2MxcEdRbGROV0VKVlYxWlNTMDVHVW5OV2JrNVlWa1phYUZsWWNISk5WbHBZVFZkR1dGSnJjRVpWVnpWRFZqRktXR0ZJY0dGU2VrWlFWbTE0VjJNeFRuUmlSVFZwVm10d1QxWXhXbUZXTVUxNFVtNU9ZVkpzV2xWWlZFcFRWREZXZEU1VlRsaFdiVko1V1ZWa1IyRkhTbFpqUkVKaFVsZE5lRlpyV21GV2F6VldWV3hrVjJKV1NrbFdWRVpoVWpGYVYxSnVVbXRTYkhCWVZXeFdkMVJzV2xWU2JHUlZUV3hLZWxscVRtOVZNa1Y1WlVaT1dtSkhVblpYVmxwVFYwVTFWMVJ0YkU1V01VbzBWbFJLTkZsV2JGWk5WV2hzVWxaYVYxWnRNVk5qYkZwMFpVVndiRll3V2taV1IzaFhZVVV4ZEdGR2JGZE5ha1V3VldwS1UxTkdXbkpoUjJoVFRUQktVRlpHV2xka01WRjRXa2hLV0dKWVVsWlVWM1IzVTFaVmVVNVdUbGROYTNCSVZUSXhiMVl5Um5KVGJXaFZZa1p3Y2xac1drOWtSVFZYVm0xb1RsSkdXWHBXYkZwaFlqRkplRlJ1VGxSaVJuQlZXV3hTYzJGR1ZuUk5WemxYVW0xNGVGVXlkSGRpUjBwR1RsWnNXR0V4V2pOV1YzTjRVbXhrZFZac1drNVdiSEJZVjJ4V2ExSXhUa2RWYmxaV1lrWmFjRmxVUW5ka01XUlhWMnhrVkUxV2NGaFpNRnB2VkRGYWNrNVlRbFpoYTBWNFZGVmFkMVp0UmtaVWJXaFhUVWhDV2xaclkzZE5WbHB6VTJ4b1ZXRnNTbUZXYkdSVFZVWndSbGRzVG10V2Exb3dXV3RrYjFSc1NsaFBWRnBYVFZad1dGbHFSa2RqYXpGV1lVWmFhVkpyY0ZGV2JYQlBVVEpPUjJOR1pGWmlSbkJ6VlcweE5GZHNiSFZqUlU1WFZqQldNMVJzYUd0V2JGcDBZVVZvVmsxdWFFeFdiWGhQWkZaS2MyTkhhR2hsYkZwR1ZtdGtOR0V4VVhsVmEyaFVZVEpvVUZacVNtOVdWbFowWkVkR2ExWnNWalJXYlRGSFZXc3hjbUpFVmxkU00xSllWbTB4UjJOc1pISmtSbHBwVW10d1NWZFhjRWRqYlZaV1RWWmFVRll6UWxSVVZXaERUVEZhVjFwRVVsWk5hM0JKVlRJMVQxWkhTbkpPVjBaVlZqTkNSMVJWV25Ka01YQkdaRWQwVTJKWVVURldNblJYVGtaVmQwMVZWbE5oYXpWWFZGWmFZVlpHVlhsTlZrcHJUVVJHV0ZadGVFOVdNVnBIVjJ0YVdGWnNjRmhWYWtwWFVqRlNjMWRzWkdoTlJGWjRWa1prTUZsV1pGZFhhMmhPVmtaS2IxWnFRbmRsVmxKellVVTVWMUpzY0ZsV1Z6VmhWbFphV0ZWc1VsWk5WbkJJVm14YWEyTnJNVmhsUm1SVFRUSlJNbFpxUm1GV01rbDRVbTVLVGxaWGFGZFphMXBMVlVaYWNWUnJUbXBTYmtKWVZsZDRZV0pHU25SbFJuQmFWMGhDV0ZsWGMzaGpiR1J6WWtaa1UyVnJWWGRYVmxwclV6RmFjazVXYkZWaVJscFZWV3BCTUdWc1dsbGpSVTVxVFZWd1NWVXhhSE5aVmtwMFZXeFNWMkZyY0haVk1GcFdaVVphZEZKc1ZrNVdiSEJKVmxSSk1WUXhXblJUYTJob1VtczFXRmxzYUZOTk1WWnhVbXM1VjJKR2NERldSM2hyVlRGWmVtRkZiRmRXYlZFd1ZrUkdZVlpyTVZkYVIzQlRWMFpLV0ZkV1VrZFpWbVJIVm01T1YySnJOVlJWYlhNeFpWWlZlV1ZIUm1sU2JIQlhXVEJXTkZZeVNraGhTSEJXVFdwR1QxcEVTa3RTYkhCSVVteE9XRkpWY0ZwV2JHUTBZVEpKZUZac1pGaGlhelZaV1d0V2QyRkdVbGRYYms1T1RWWmFNRnBWVlRWV01rcFdWbXBPVjAxdWFFUldha3BHWlVkT1NXSkdhR2hoTVhCVVYydFNSMkV4WkVkalJXUlVZa2RTV0ZWdGVIZGlNVnBWVW14a1YwMUVSa2hXUnpWUFZtMUtjbU5HWkZkTlJsVjRWWHBHVjJNeFpIUlNiR2hwVW01Q1dGWnFTakJOUmxWNVUydGtWMkZzU2xoVmJURlRZMnhhYzFaWWFGZGlWWEJIVkRGYVMxUnRTbGxoUlZKWVZrVmFXRmw2Umt0a1JrNXlWMnM1VjJKSVFsVldha0pyWWpGU1IxZHNhR3hTYlZKWFdXeFZlRTB4YkhKV2JVWm9WbXR3VmxscldrOVdWbHBZWVVoYVYyRnJXbGhaTW5oaFpGWlNjMVpyTlZkV2VtZzBWbXhhYTAxR1VYaFhXR2hZWW1zMVZGbHNVbGRYUmxaeFZHczFUbFpzY0hwV2JUVlBWVEpLVjFkclpGcE5SbkJZVm1wR1dtVnRSa2RhUm1SWFRUSm9XVlpzWkRSa2JWWkhXa2hLV0dKRlNsUlVWM2hMVjFaYVdHVkhkR2xOVld3MFZrZDRZVmRIU2xsVmJFNWFZVEZ3YUZwWGVGWmxWMUpHWkVaa1YwMUlRa2xXVkVvd1RVWmFkRk5yWkdwU1ZHeFpXVmQwWVZVeGNFVlNiWFJZVW01Q1NGWnRlR3RXTWtwSlVXeGFWMkpHY0ZSVlZFcEtaVVpLZFZSc1dtbGhlbFpZVjFaU1EyUXhWWGhpUmxaVVlXeEtWbGxyV2xkT1JsbDVaVVU1V0ZJd1ZqWlpWVlpQVmxaYVYxZFlaRlpOYm1oSFdsWlZOVmRGTlZkWGJXeFlVbXR2TWxadE1UUlpWbFY1Vkc1T1dHSnJOVmRaYTFwM1l6RmFjMVp1WkZSV2JIQjVWbGQwYTFaSFNraFBWRkpXWWxob1ZGWlhNVXRTYkdSelZHeGthVmRHU1hwV2JURTBWbTFXUjFkdVNsQldiVkp3VlcxMGQxTkdXbGhOVkZKVlRWVTFlbFV5TlV0V1IwcElWV3hvVjJGck5YWlZhMXBoVm14a2MxZHRkRTVXYmtKYVZqSjBZVk14V1hoWGEyUllZVEpTVjFSV1dtRldNVkpYVjJ4a1UwMVdXakZWTWpGelZURmFTR1ZHVmxoV00xSllXa1JHVG1WR1pISmhSM1JUVFRGS1ZWZFhkR0ZUTVZsNFYyNVNhbVZzV2xoVVZsWmFUV3hhV0UxRVJsZGhla1pZVm14b2ExZEhSbkpYYkZKYVRXNU5NVlV3V25kU01WSnpXa2RzVkZKVmNFcFdiVEV3WVRBMVIxWnVUbWxOTW1oWVZqQmtVMkl4Vm5OV2JtUlhZa1phZWxsVlpEQmhWMHBIWTBoc1YySlVRVEZXVkVwR1pVWk9jMVJzY0doaE0wSjVWbXRXYTFJeFduTlVia3BWWWtkU2NGVnROVU5XVmxwVlVtMUdWbUpXV2toV1J6VlBWbTFGZWxGc1VsZGhNbEV3Vm14YVZtVkdXbk5hUmxaT1ZteHdTVlp0TVRCaE1rWlhVMjVLVDFac1dsaFphMlJUVmtaVmVXVkhSbXBpUmtwNVZrZDRVMVl5U2taWFdIQllZa1phV0ZacVJsWmxSbVIxVTIxd1UySkdjRlpXYlhoaFdWWlNSMVp1VW10VFJUVlVXV3hhWVZJeGEzZFhhM1JYVFZad1dsVlhjelZXTVZsNllVWkNWbFpGV2t0YVZWcFhWMWRHUjFWc1pFNWlSWEJWVm0weE5GVXhXWGhpUm1SVllrWndXRmxZY0hOV2JGcDBaRWRHVjAxWGVIbFdiRkpIVmxaYWNsWnFUbFpOYmxKb1ZtMTRZV014V25GVmJGcFhUVEpvVEZkclVrZFpWMDE0Vm01S2FsSnJOVmhWYWs1dlZteGFWVkpzWkZkaGVsWllWako0YTFaWFJYaGpSbWhhWVRGVmVGVnRlR0ZXTVd3MlZtMXNhVkpVUlRGWFYzUlhWREZhVjFkdVNrOVdiVkpYV1d4b1UxVkdXbkpYYlVaWVZqQmFSMXBGV210aFJURlpVV3BXV0ZkSVFrUlpla1pLWlVkT1JsZHRiRk5oZWxaWlYxZDBWMlF4VFhoWGJHaHNVakJhVlZscll6Vk9SbHBJWlVkR1ZVMVZiRFZXVjNoUFZqSktSMU5zVWxwaVdHaFlWbXBHWVdOck9WZGFSbVJvWld4YVdWWnJVa2RXYXpWWFZHNU9WR0pHV25CVmJHUnZWbFphYzFkdFJsWlNiSEJYVmpKNFQyRnJNVmRYYm5CWFVqTm9URlpxUm1GV1ZscHpXa1prVTFac2NGRldWbEpIV1ZaWmVGWnNiR2hTYkVwd1ZXMTRkMVJHV2xobFJrNXFUVlp3U0ZaSGVHRldNVnBIVjJ4b1YySllUWGhWYWtaaFpFZFdSazlXWkU1U1JWcEtWMnhXWVZZeFduUlRhMXBQVTBoQ1dWbFhkR0ZUUmxweFVtczVhbUpWTlVoV01uTXhWVEF3ZVdGR1NsZGlSMDE0V1hwR1JtVkdUbGxoUm1ScFlUTkNVbFp0ZUZOV01WSnpWbXhrVm1Fd05WWlZiWE14VmpGYVNFNVhSbHBXVkVaWVZXMXdVMVl5U2xsaFJtaFdUVzVvVEZac1pFdFNiVVpIVld4a1YySkdWalJXYlhoVFVUSk5lRk51VWxSaE1YQlJWbXhvUTFaR1duTlZiR1JXWWtad2VWZHJhSGRVYkZweVkwaHdWbUpIYUhaV2JURkdaV3hHYzFkc1ZsZFdhM0JWVjFjeE5GbFhUbGRTYmxaVllrZFNXRmxZY0ZkU2JGcFhXa1JTVjAxV2NFaFZNbmhyVmpKS1ZWWnNhRmRoTVZwSFZGWmFWMk5XU25SU2JFNU9WMFZLU0ZaVVNqUlpWMFpHVFZaa1dHSnNXbGhaVkVaTFUwWlZlV1ZJV214U2JWSjVWakl4YjFVeFduVlJhM2hYVm5wRk1GZFdXbUZXTVZwMVZHeFdhRTFFVmxoV1Z6RTBXVmRSZUZac2FHeFNWVFZZVkZaV2QxZFdiRlpXYlhSWFRWWnNOVnBWVmxOV2JVcEhZMFY0VjJKWWFFeFpNbk40VmpGV2MxcEdaRk5pU0VKTVZtMHhOR0l5VFhoU1dHaFZZbXMxVjFsc1VsZFVNVlp6WVVaT1ZFMVdXbFpWTVZKWFlWZEtSMk5JYkZkaVZFRXhWbFJLUm1WWFZrWmhSbVJUVFRKb1JWWnNVa3RUTVVsNFZHNU9hVkpzY0ZoWmEyaERWRlphV0UxVVFrOVNNSEI1VkZaV1lXRXhTbGxSYkU1VlZqTkNlbHBHV21GV01XUjBZMFUxVjFaR1dsaFhWM1JYWWpGa1NGTnVUbXBUUlZwaFdXdGFTMUpHYkhSbFNFNXFWbXMxZWxrd1pFZFViR1JHVTJ0d1dGWXpVbFJWVkVwSFpFWk9jMkZIZUZSU1ZYQnZWbGN3ZUdJeFdrZGhNMlJoVWxoQ2MxWnNVbGRUYkZwSVpFaGtWMUpyY0ZaV2JUVjNWMFpaZWxWdVNsVldSWEJQV2tSS1MxSnRTa2RYYld4cFYwZG9iMVp0TURGa01WbDNUbGhPWVZOR1NrOVdiVEZUWXpGYWMxcEVVbFJXYkd3MVZHeGtSMkZIU2xaalJtUmFUVWRvY2xZd1pFWmxWbFp6Vld4d2FFMXNTazFYVkVKclZXMVdWMk5GYUdwU01uaFlXV3RrTTAxV1duRlRhbEpwVFZVeE5WWnROVTloYkVwelUyeE9XbUpIYUhaWk1GcHpZekZ3UjFSdGRFNVdNMmQzVmtaYVlXRXlSbGRUV0dSUFZrVktZVmxVU205WFJtUlhXa1prVjJKRk5URldWM2gzWVVkR05sWnJNVmhXYkhCeVZXcEdhMUl4V25WVmJYUlRUVVp3V1Zkc1pEUlRNbEpYVjJ0YVdHRjZiRk5VVjNoaFpXeHJkMWR0T1ZkTlZtdzFWbGMxUTFadFJuSmlla0phVFZad2NsbDZSbk5PYkVwMFlVZHNWRkpWY0ZkV2JGcHFaVWRKZUZwSVVsUmlSbHB2VkZSS05GZFdiSEpXYkdST1RWWlpNbFZYTlU5Vk1VbDNZa1JPVldKR1dsUlpWVnBoVm14a2NWVnNXazVXYkhCWlZtdFNTMVV5VFhsVWExcG9VbTFTV0ZSWGVFdGxWbHBIV2tSQ1dsWlVWbnBXUjNoaFYyMVdjMWR0T1ZkaVZGWkVWRlphWVdSRk5WbGFSbWhwVW0xM2VsWkhkRzloTVdSSVUydG9WbUpGTlZsWlYzUmhUVEZWZUZkdFJtdFNNVnBIV1RCYVUxVXlSWGxQVkZaWFZrVmFXRmxxUmtabFZscHpXa2R3VTJKWWFGcFhWekV3VXpKT1IxVnNWbE5pVlZwUVdXdFZNVll4WkhKVmJFNW9Za1Z3TUZwRlVsZFdNa3BWVm14b1YwMXVUalJaZWtaaFpFVTFXRkpzVG14aE1XOHlWakowYW1WR1RYaFVhMlJVWW10YVUxbHNaRzlYUm5CWVRWUk9iRkp0VWxaV1J6RjNZVEF4VmsxVVRscGhNVnBVV1ZaVmQyVkhUa1pYYkdSWFlsVXdlRlpZY0VkU2JWWkhVMjVXVkdKVldrOVdhazVTVFZaa2MxWnRkR2xOYTFwNVZGVm9hMVJzV2paV2JVWmFWa1Z3VkZwWGVITlhSMVpKV2tab1UxWkdXbUZYVkVKclVqRlplVkp1VW14VFJuQlpWbXRXUzJSc1ZsVlRhelZzVm10d2VsbFZXbGRoVmxsNVlVaHNWMVl6UWt4VWExVjRZekpLU1ZWdGJGTldWRlozVmxkd1IxbFdUbk5YYkdoT1ZrWktiMVpxUW5kWFJsVjVZMGRHVjFKc2NGbFpWVlpUVjJ4YVYyTkVUbFpOUjFKVFdsWmFkMU5IVmtobFJtUlhWak5qZUZadGNFZFpWMGw0Vkc1T2FVMHlVbkZWYkdSVFZWWmFjMVp1WkZkaVJscDZXVlZqTlZac1duTmpTR2hXVmpOb2NsWlVSbUZrUm5CRlZXeGtVMDB4U205V2JUQjRVekZKZVZScldtRlNiVkpZVkZSS1RtVkdXbGhsUjBaVlRWWndlbGRyYUU5V2JVVjZVV3hTVm1FeFdreGFSbHBoVWpGYWMxUnRlR2xTZW1zeFZteGpNVlV4VlhsVGJsSnNVbGhTVjFaclZtRlVSbXh6VjJ4a1YwMVdjSGhXVjNoWFZqSktSbGRVUWxkTmJsSllWMVphVm1WR1RuVlNiV3hUVjBaS1dWWnRlR0ZqYXpGWFZtNU9XR0Y2YkZoWmEyUlRaV3hhV0dSSVpGWk5WWEJIVlRJMVYxWXhTbk5YYkZKaFZqTm9NbHBXV2xka1ZsWnpWRzFzYVZkSGFFMVdiRnBUVWpGTmVWTnNaRmhoTVhCWVdXMXpNVlpHVm5Sa1NHUlhUVlpLZWxZeWVFOVdhekZYWTBob1dtRXhjRXhXYlhoaFl6Sk9SMVZzV2s1V2JGVjRWa2Q0WVZJeVVrWk5WbWhyVW0xU2MxbHJXbmRPUmxsNVpFWmthRTFyTVRWV1Z6VlRWa2RLY2xOc1RscGlSbkF6VmpKNFUxZEhUalpTYXpWcFVqTm5kMVpIZUZaT1ZsSnpVMWhrVDFaRldsaFpiRkpIVFRGc1ZWSnJXbXhXYmtKS1ZUSjRiMVV4U2xsUmJHaFhVak5TYUZsNlFURmpNazVHWVVkd1UySnJTbGxXVjNCTFZEQTFWMWRyWkdoVFIxSlZXVmh3UjJWV1VuSmhTRTVYVFZad1IxVXllRWRXYlVWNFYyeG9WV0pHY0ZSV01XUlBVbTFPUms5V1pHbFhSMmhZVm0xMGFtUXlWa2RhU0U1WVlURndjRlZyV25kV2JGcDBaVVYwVlUxWVFrWlZWbEpYVjBaS2MyTkVRbHBOUm5CSVZtMXplR014VG5GWGJHaFhZa2hDZVZaclVrdFRNVTVIVkc1V1YySkdXbkJXTUdSdlZERmtXR1ZIUmxSTmEydzBXVEJXWVZaWFNsbFJia1pWVmxkUk1GVnNXbUZYUlRGWVVteGFVMkV6UWtoV1ZFa3hWREZrU0ZOc1ZsTmlWVnBvVm14YVZtVkdXWGRYYlhSclVqQTFSMVJzV210Vk1WcHpWMWh3VjJFeGNGaFpWRVpTWlZaT2NsZHJPVmRpVjJoVlZtcENiMUV4VmtkWGJrWlRZbFZhY2xWdGVFdFdNVnBZVGxVNWFGSnJjRlpXYlhSaFZqQXhjVkp1V2xkU1JYQllXVEo0VDJSV1JuTldiV2hPVmxoQmVGWnJVa2RoTVZWNFZHeGtWV0pyV2xSWmJGWmhWakZTVlZOc1RtdFdiRlkxV2tWYWQxUXhTbFZXYTJoYVRVWmFkbFpzV210VFZrWjBZVVphYUdFd2NGbFdSbEpIWVRGWmVGWnVVbEJXTW1oVVZtdGtORmRzV2xoTlNHUnNVbXhLTUZVeWVHdGhiRTVHVjJ4c1YwMUhhRVJXUkVaVFZsWkdXV0ZHWkZkTlJtdDVWbXRrTkdReFdYaFRXR3hWWVd4d1dGVnRNVTlPUmxwWVRWWmthbUY2VmxoV2JYaHZZVlpaZVdGSGFGaGlSMUl6VlcweFVtVkhSWHBpUlRsWFlsWktkMVpYZUc5aU1VcFhWbXhrWVZKRlNsbFdha1poVFVaYVdFNVZUbGRXVkVaWVZUSjRhMWxXV25OalNIQmhVbFp3VkZZeFpFOVNNazVJWVVkc1dGSXlaekpXYlhCSFlUSlJlRlpZYkZOaWF6VndWVEJXWVZsV1VsVlVhMDVWVFZaYWVWZHJZelZoVlRGWFUyeGFWazF1YUZCWlZscGhaRWRXUlZGc1pGZGxhMVYzVm10amVGTXhXbkpPVm14VllrWmFXRlp0ZEhkU1JscEhWbTFHVWsxWFVsaFdiVFZYWVZaSmVsVnNhRlZXYkhCb1ZHMTRWbVZHV25KUFZscE9WMFZLTlZaR1dtRmlNVnBIVjJ0YVdHSkZTbUZaYTFwWFRrWlNjMWR0ZEdwaVJscDVWVEp6TlZVeVNsbFpNMnhYVmtWYWRsbDZSbXRrUms1eldrZHdWRkpZUWxkWFZsSkhVekZKZUZWdVRsaGlhelZ5VlcxNGQxZHNiRlpXVkZaWFRWVndWbFZYY0U5V01VbDZZVWhLVmsxdVRYaFdiWE0xVmpKR1IxVnNaRk5YUlVwU1ZteGtNRmxYVG5KT1ZtUmhVMFpLVDFac1pGTmpWbEpZWXpOb1QxWnNjSHBaVlZaUFZrZEtSazVWY0ZkU2VrRjRWbXRrUm1WWFJrZFZiSEJvWVROQ1NWWnFSbUZWTVdSWFZtNU9VMkpYZUZSVmFrNXZUa1paZUZkc1pHaE5WbXcxVlcwMVUxVXhaRWhoUmtaWFRVZG9SRmxWV21GalZrWlZVVzE0VTJKWVVURldSbHBoV1ZkR1ZrMVZiRlppUm5CaFdsZDBkMk5zVmpaU2F6bFRUVlUxTVZZeWVIZFdNa3BZWVVaQ1dHRXhXbWhWVkVwT1pEQTVWMWRyTlZkaVJYQlpWbTE0VTFZeFRrZFhia3BoVWtaS1ZsUldWbmRsYkdSeFZHMDVWbUpWVmpOWk1GcHZWbTFLU0ZWdVNscGlXR2hZVldwR1UyTnNUblJoUlRWWFRXeEZlRlp0TVRSVk1WVjRXa2hTVjJKc1NsZFpiWFJoVjFaYWRHVkZkR3RXYkVwWldYcE9iMVF5U2taT1ZscFdUVzVOTVZaSE1VdFNNVnB4Vkd4a1UxSlZjRlZXVnpCNFZqRmFjazFXVmxoaVJrcFlWVzE0ZDJGR1duUmtSbHBPVmpGS1NGZHJXbXRXYlVWNlVXNU9XbGRJUWtoV2JYaGhVakpHU0dSR1dsTmlSM2N3Vm1wSk1WSXhXbFpOU0d4c1VsVTFZVlpyVm5kV1JsVjNXa1ZrVkZacldqQlpNR1EwVmpGS1ZsZHFWbGROVm5Cb1dWZHplRmRHVW5KaFJscG9UVlZ3YjFaR1l6RlZNV1J6WTBab1RsWXpVazlVVm1SVFpXeGtjbHBGWkdoV2JIQldWVzE0WVZZeVNsVlJhbEpYVFdwR1dGa3llR0ZqVmxaelZtMW9UbFpZUWtaV01WcHJUa2RSZUZkc1pGaGliRXB2Vld4U1YyTXhiSEpYYm1Sc1lrWnNOVlJXYUd0VmJVWTJWbXhvV21FeGNGaFdiWGhoVW0xT1NGSnNaR2hOYkVwUlZrWlNSMkV4WkVoVWEyUlVZWHBzVkZZd1pHOVNiRnBYVjIxMFRsSnRVbGxXYlRWVFlVWk9SbU5HYkZkTlIyaEVWbFZhYzFaV1NuVlViR1JYWVRGdmQxZFdWbUZSTVZWM1RWVmtWMWRIYUZoVVZscDNZMnhaZVUxV1pGZE5helZLVmxkNFYyRldaRVpUYkVKWVlrZE9ORlpFUVRGU01WWlpZVVphYVZkR1NuWldWM2hUWXpGS2MxcEdWbFZpYXpWaFZtMTBkMUl4VWxaaFJ6bFhWakJ3VmxWdGRHOVhiRmw2VlZSQ1ZtRXhjRWhXTUdSVFVqSktTR1ZIYkZkaE0wRjZWbTEwVTFJeFZYaFhibEpYWWtkU2NGVXdXa3RXYkZsM1lVVk9XbFp0ZUZsVVZsSlRZV3N4V0ZWc2JGcE5SbkJRV1ZWa1MxTkhWa2xoUm1oWFVsUlZlbFpyWkRSVE1VNUlVbXRvVUZac1dsaFZiR2hEVmxaa1dHVkhSbXBOYkVwSVZtMDFVMkpHU2xWV2JrSlhZa1pLV0ZwWGVHRlNNVnB6Vkd4S2FHVnJXa2hYYkZaWFZURldjMWRZY0ZaaVNFSm9WbXBPVTJGR2EzZFhiRTVxVFZaYU1GVnRNVzloUjFaeVYxaGtWMkpHY0haWlZFWlhVakZPV1ZwRk5WZFNiSEJYVm0wMWQxSXhVa2RpU0U1WVltMVNWRlp0ZUdGWGJHeFdWMnRPVjAxRVJrcFZWelYzVmpGS2MyTkdVbGRpVkVaWVdUSnpNVlpzV25OYVIyeFhUVEpvVTFadE1UQmhNRFZJVkd0a1ZtSnNTbkZWYlhSM1ZERnNWVlJzVGxkaVIzY3lWVEl4TUdGR1NuTmlSRkphWVRKb2FGWnJaRVpsVjBaSFZXeHdhR0V6UWtsV2FrWmhWVEZrVjFadVRsTmlWM2hVV1d0b1ExWXhXbk5hUkZKWVlYcFdXRll5ZEd0V1IwcElWV3hXV21FeVVsUldhMXBoWkVkU1NWUnRkRTVXVkZaWVYxWldiMlF4YkZaTlZXeFNZVE5DV0ZadWNFSk5WbXhXVjIxMFUyRjZSbFpWVjNoaFZUQXdlVlJZYUZkaE1sRXdWV3BHWVdNeFZuTmhSMFpUWVRGd1dGWkdWbGRaVjFaWFdraEtWMkpZVW5CVVYzTXhVMVphU0dOR1pGVmlSVlkyVmxkNGQxWldXalpTYkZKYVpXdGFNMVZ0ZUd0V1ZscDBaRVpPYVZkSGFHRldiWFJxWlVac1YxcElUbGhYUjJoVldXMTBkMWxXVWxoalJXUllVbTVDV1ZSV1ZUVlVNVnAwVDFSYVZsWXphRVJaYTFwaFZtMUdObEpzV2s1V2JIQXhWMnRTUjJSdFZraFVhMnhYWWtkU2NGbHJXbmRoUmxwSFZXdGtWRTFzUmpSWmEyaEhWa1phUmxOdGFGVldNMDQwVkd4YVlXUkhUa1pVYkdoWFZrVkplbFpIZUc5VU1XUnlUVmhHVjJKWGFHRlpWRXBUVlVac05sRlVWbGRXYXpWNldUQmFiMVV4WkVaU1dHeFhWMGhDUkZaRVJsWmxSMDVKVTJzMVYySkdjRlZXYWtKcllqRlJlR0pJVGxkaWEzQnpWVzB4VTJWc1pISlhhM1JWWWtWd1ZsVlhjRmRXTVVwelUyeENWMUo2UmxoWk1qRkxVbFprYzJGSGFFNVdXRUoyVmpGYVlWWnRWa2RhUldSWVlrWmFWVmxZY0ZkVU1XeHlZVVZPYkdKR2JEVlVWbWhyVlcxR05sWnJaRlZXYldoSVZsUktTMWRXVm5OU2JGcG9UV3hLZVZkclVrZFVNVnAwVW10c2FsSXdXazlWTUZaTFV6RmFjMWt6WkU5V01GcElWMnRXWVZSc1drWlRiR1JXWVdzMWNWUldXbk5YUlRGV1drWlNVMkpJUVhkWFZFSnJZakZTYzFkcmFHdGxhM0JZVkZjMWIyTnNXa1ZSV0doWVVteEtNVlpYZUd0V01sWjBaVVUxVjJKWVVuWldSRXBMWXpGU2RWTnRhRk5oZWxaM1ZrWmtNRmxXWkhOWGEyUm9VbXMxVjFacVFuZFNiR3h5VjJ4a1YySlZjRWhaTUZZMFZqSkdjbGRyZUZkaGExcFFXa1ZhYTJNeGNFaGhSVFZUWW10S1YxWnRNVFJpTWsxNFVtNUtVRlpzY0hCVmJGcExWakZzYzFkdVpGVk5WbkI1Vm0xNGExUXhTbk5UYkd4VlZteGFNMVpIZUdGa1ZrWnpZa1prVjJKRmNFVldhMlI2WlVkT2NrMVZiR3BTYkZwWlZUQldTMVJHWkhOYVJGSnJUVlZ3V0ZkcmFGTmhWa3BWVm14b1ZWWnNjRmhVYkZwaFVqRldjbVJHY0ZkTlNFSkpWMVJDYjFJeFZuTlhhMlJVWVhwc1lWWnFUbE5oUm10NVpVWkthMDFXV2pCVWJGVTFWR3hKZW1GRldsZGlSMUl6VlZSS1IxSXhUbGxpUjNoVFVtNUNWMVpYTVRSU2JWWkhXa2hTYkZKVWJGaFVWbFpoWld4YVdHUklaRlpOVlhCSFZUSTFWMVpyTVhWVmJscFhWa1Z3UzFwV1drdGpNa3BIVm14b1UyRXpRbFJXTVdRd1ZUSk5lVlZzWkdGVFJUVnZWVzF6TVdGR2JITldiVVpZWWtaYVdWUldaRWRYUjBwSFlrUlNWazFxVmt4V01uTjRZMVpLYzJGSFJsZGxhMXBSVmtkNFlXUnRWbk5TYms1U1lsaG9XRlpzV25kT1ZsbDVaRVprYUUxcmJEVldSM1J2VmxkR2MxZHJPVlpXUlRWVVZqSjRVMVl4V2xWU2JFNU9WbTVDV2xkc1ZtdFNNVlY1VTJ0a1dHSnVRbFpVVmxwaFRURmFjMXBGV214U01EVklWVzE0VTFZeFduSlhXSEJYVFc1Q1JGcEVSazlXTVZwMVZXeENWMDF0YUZwV1YzaFRVbTFSZUZkc1dtRlNSVFZRVm1wQ2QyVnNhM2RYYms1WFlsVndXRmt3YUVkV1ZsbDZZVWRvVldKR2NETlZNRlY0VmpGd1NHVkdaR2xXTVVWNFZqRmtNR0l4V1hoaVJtaFVZa1phYjFVd1duZFdWbEpYVjJ0MFQySkhVbmhWTWpGSFZqRktjbGRxUWxWV2JWRjNWbXBLVjJNeFpIVmhSbWhvVFZad2VWZFljRXRWTWxKSFZHNVdVbUpGY0hCV2JUVkRZakZhUjFwRVVsaGlWa1kwVjJ0V1YxWkdXa2RYYms1YVlUSlNjbFJ0ZUZwbFZURllUMWRvYVZaV2NGcFdNblJ2VXpGa1IxTnJXbXBTYlZKV1ZteGFWbVZHV25OWGJFNVhWbXMxZVZSc1drOVZNVnBIVjJwT1YyRXhTa2haVkVaelYwWktjbHBIY0ZSU1ZuQjJWa1pTUzA1R1ZrZFdia3BYWWxWYWNWVnRlRWRPUmxwWVpVVTVhRlpyY0RGVlYzaHpWbXN4V0dGRVRsZFNNMmhvVlRCYVYyUldWbk5XYld4VFRWVndVVll5ZUd0bGF6RlhWMnhrYVZKR2NGTlpXSEJIVlRGU1ZsWnRSbXhXYkd3elZsZDBNRlpYUmpaV2EyUlZUVlphV0ZacVJtdFRSMFpJWVVaa2FFMXNTbEZXUjNoaFZURmFWMVJ1U2xCV01taFBWV3RrTkZJeFduUmxSemxxVFZaR00xUldhRTlXUjBweVUyeGFXbUV4Y0V4V2FrWlRZekZhVlZac1RsZE5SbGt5VjFSQ1ZrMVdWWGhUYkdoclpXdGFXRlJYTlZOamJHUlhXa1ZhYkZJd05VZFpWVnB2VmpGS1ZWWnJOVmRpUmtwRVZUSnpkMlZHVW5OWGJGWnBVbFJXYjFkWGRHOVJNVnB6VjJ4a1ZtRXlVbFpaYkZwaFpXeHNjbFZyT1ZkV2JIQkhXVEJXTUZaWFNrZGpSRTVoVWxad1RGcEZWWGhXTVVaeldrWk9WMDB4UmpaV2JYUmhXVmRGZUZSdVNrOVdiSEJRVm14a2IxZEdiSE5oUnpsYVZtMTRXVmw2VG05VU1VcHpVMjVvVmsxdWFETldSM2hoWkVkU05sTnNaRk5pUlhCSlZtdFNTMVl5VFhoVGJsSlBWbXh3VkZsWWNGZFNWbVJ6V1ROb1ZrMVZOVmhXUnpWSFZXMUtXR1ZGT1ZwaVZFWjFXbFphYTJOc1ZuSmtSbVJPWWtad1dGZHJWbGRWTVZwMFUyeGthbEl5YUZoWlZFWjNVakZ3Vmxkc1RsaFdNRFZJV1RCa01GUnNTa1pUVkVaWFZrVmFWRlpxUm5OWFJrNXpWMnhvYVdKRmNGZFdSbHBoVXpGTmVGVnNXbGRYUjJoWlZXMXpNVlpzV25SamVsWldUVVJHV0Zrd2FIZFdNREZZVldwT1YxSjZSbGhWYlhNeFUxZEtSMkZHWkZOV2JrSnZWako0YTJWdFVYbFdhMlJXWW14YWNWVnRkSGRqVmxaelZXNUtUbFpzV2xsVWJHaHJZVVV4UlZKcVFtRlNSVFZ5VmpCYVlWSnRUa2xXYkhCb1lUQnZlbFpYY0VKT1ZtUklWR3RrVW1KRk5WUlVWM013VFVaYWNsZHRSbWhOVm5CNVZGVm9hMVJzWkVaWGJGcGFZa2RvUkZsVldsZGpiSEJJWTBkNFUySkZjRnBYVkVKclRVZEdSazFXYUd4VFIyaFlXV3RhUzFOR1dsWlhiVVpVVW0xM01sVnRlRmRYUms1R1UydFNXR0pHY0ZkYVZXUlRVakZhZFZWck5WZE5SbkJWVmtaYVYyUXdNVWRYYTJoUFYwVTFjVmxyWXpWT1ZscDBZMFprVm1KVmNGcFZWekZIVmpBeFIxWllhRnBsYTFwUVZtMTRVMlJIVWtoaVJtUk9Va1pXTTFadE1IZGxSVFZIV2toU1ZHSnJjRkJXTUZaM1ZsWnNkRTFVVWxKTlZrb3dXa1ZvVDFaR1NuTlRha0phVmxkU00xWkhNVXRTTVdSMVZteGFUbUpyU2t4V1JscHJVekZPUjFadVNtaFNiRXB3V1cxMFMySXhXbGRWYTNSVlRXdHdlbFpXYUhOaFZrcFdUbGM1V21FeVVUQldNbmhoVTBVeFZWVnNVbWxTVmxreFZteGtkMWxXWkhSU2JrcHBaV3RLWVZac1pGTlZSbkJHV2tWMFZGWXdOVWRhUldRMFZqRmFWMVpxVmxkV1JWcFlXVlJHVW1WV1NuSmhSbFpZVWpOb1dWWnRjRXRWTVZKSFZXeFdVbFpGU25OVmJURTBUVVpTVmxWc1pHbFNNRlkyVlZaU1IxWnNXbk5UYldoV1RXNW9TMXBFUVRGWFJUbFhZMGQ0YUUwd1NsbFdha3AzVVRKU2RGWnNaRmRpYkVwdlZXcE9RMk5HYkhOWGEzUk9UVmRTV1ZSV2FFOWhSMHBJVDFST1ZVMVhhRVJXVnpGTFpGWkdkVk5zVmxkbGExWTJWMnRTUjJFeFdsZFVibEpQVmpKNFQxVXdWa3RUVmxwRlVtMTBUMUpzUmpSVk1uUnJWakpHYzJOR1dscGlSMmhFVlZSR2QxZEhWa2xVYlhCWFRVaENTbFpHV21Ga01WbDNUVlpvYWsweWFGaFZiVEZUVFRGYVdFMVdaRk5OYTNCS1ZXMHhiMkpIUlhkalJ6bFhZbGhDU0ZkV1pFOVNNVlp6WWtkd1UxWnVRbEJXUmxwdlVUSldSMWR1VWs1WFIxSldXV3hhWVdWc1duTmhTR1JYVmpCV00xUnNhSE5YUjBaeVkwWm9WV0pHY0VoYVJXUlBVakpPUjJGR1RsZFNiRzh5Vm14U1IxWXhVWGxTV0d4VFlteEtWVll3WkRSVlJscDFZMFZrVlZKdVFsaFdiWFJoVkcxS1JrNVdaRmRTTTJoUVYxWmtSMDVzU25GUmJGcE9ZV3RWZDFac1ZtRlRNVWw0VTJ4V1UySkhhSEJWYWtaTFZFWmFSMVZyWkdwTlJGWXdWVEowYjFSc1dsVmlSbWhXWWtkb1JGcEVSbUZTTVdSMFpFWmFhR1ZyV2toV1JscHZWVEZhVjFkcldtcFNhMHBoVm01d1JtUXhVbFZTYkU1WFZtczFlVmRyWkc5Vk1rcFpZVVJTVjFac2NGUldWRVpUWXpGT2NsZHNaR2xXUmxwWVZsY3hlazFXUlhoaVNGSnJVa1UxYzFscldrdE5SbXh5V2tjNVYwMXNXbnBWTVdoelYwWmFjMk5JU2xoV2JWSklXa1ZhVDFkWFNrWlBWbVJzWVRGd01sWnRNWGRUTVZGNVZXeGtWbGRJUW5CVmJGVXhZakZhY1ZGVVJrNVNiSEF3VkZaak5XRkdTWGhYYWtaWFVucEJlRll3V21GU2JVNUdZVWRHVjAweVozcFdiWFJoVWpGa1JrNVdhR2xTYlZKUFZXMDFRMDVHV2xWVFZFWnFUVlZhZVZSc2FFdGhWa3BYVTJ4a1dtSkdjRE5XUkVaell6RmFkVnBIY0U1V2ExbDZWbXhrTkZNeFVYaFhibFpTWWtkNFYxUldXa3RWUmxsNVRWWmthMUl4V2twV1YzaFhZVlpLY21ORk1WaFdiSEJYV2xWYWExSXhXbk5XYkVwb1pXeGFkMVp0ZUZOUk1EVlhWMnRvVGxkSFVuRlpiRnBIVFRGU1ZtRklUbFpOYTNCWldWVmtSMWRzV1hwVmEyUlZWbFp3VkZadGVGZGpiR1IwVW1zMVYxWllRbGRXYkZwaFlXc3hWMkpHWkdGU1YxSlZXVzE0ZDFkV2JISmFSemxVVFZkNE1Ga3pjRmRVTVZweVYycENXbUV5VWpOWlZscGhZekpPU1Zkc2FGZGlWMmQ2VjJ4a05HUnRWa2hTV0hCcFVtczFjRmx0ZEV0aU1WcHpWV3RPVTAxc1NsaFphMXByWVVaS1ZtTklRbHBXUlc4d1ZXMTRjMk5XVG5Sa1JsSk9WbGhDTkZkV1ZsTldNV1JIVjJwYVUySkhVbFpaVkVaV1pVWldjMXBGZEZSU01WcElXVEJrYjJGV1duSmpSRkpYWVRGS1NGbFVSbXRqYXpGWFYyczFXRkpyY0ZaV2FrSnJZakpHUjFadVNsaGhNbEpRVm0weFUxZHNhM2RYYm1SVllsVlpNbGxyV21GV2JGcDBZVVJPVjAxdWFHRmFSRVpyWkZaR2MxWnNaRmRoTTBGNFZqSjBVMUZ0VmtkWGEyUlRZa1phY0ZWc2FFTlZNVkpZWlVWMFRrMVhVbGxVVldodlZqQXhSVkpyWkZwaE1WcFVWakl4VjJSR1ZuSmtSbHBvWVRCdmVsWkhlR0ZoTWsxNFkwVmFZVkl6UW05YVZ6RjZaVVphVjFwSVpHcE5WVFY2VlRGb2EyRnNTa2RYYkd4YVlUSlNWRlV3V25KbFYwNDJWbXM1VjJFeGIzZFhWRUpoWkRGa1IxTnNWbGRpYmtKWFZGWmFZVlZHYkZWVGF6VnNWbXR3ZWxsVlZUVldNVXBYWTBod1YxWnNTa3hXUkVwTFl6RldXV0pIYkZOV1ZGWjZWMWQ0WVZJd05WZGlTRXBXWVRBMVdWbFljRWROUm1SeVlVZEdWMUl3VmpSWldIQkhWMjFGZUZaWWFGWmlSbkJvVmpGa1QxSnJPVmhoUjJoT1VtMTBOVlp0Y0VkaE1sRjVWRmhzVkdKSFVuQlZiVEZ2VjFaYWNsZHRSbFZOVjNoWldsVldhMVF4U25SVmJHeGFUVWRvVEZaSGVFdGtWa1p6WWtaa2FWWkZXalpXYTJONFZqSk9jMWRzYkdwU2JXaHdWakJXUzFkV1pGZGFTSEJzVWxSV2VsWXllRmRXVjBZMllrWk9WVlo2VmxSYVJscHJZekpHU1ZSc1NrNWhNWEEyVjFkMFlXTXhXbGhUYkd4b1VsaFNWMVpyVm5kV1JtdDRWMjVPYWxack5WWlZiVEZ6VmpGa1JsSllhRmRXYkhCVVYxWmFUMk14U2xsaFJsSnBWa1ZhVjFadE5YZFNNVkpIWWtoS1YxWkdXbFJXYlhoaFZteGFkRTFWWkZkTlJFWkpXa1ZTWVZZd01WaGhSRTVhWld0d1RGWnRjekZXTVZwelZXMXNWMDB5YUZGV2JURjNVakZLZEZWWWFGWmlSMmhQVm14U1YxUXhiRmxqUm1Sc1VtMTRWbFpITVRCV1YwWTJVbTVzVjAxcVFURldNRnBhWld4R2NsUnNWbWhOVmxrd1ZsZDRZVk14WkVkalJXUlRZa1p3VDFWc1duWmxSbHB5Vm14T1ZVMVdSalZWYlhodlZUSktTR0ZHUWxaTlJuQXpXV3BHWVdOV1NuVmFSM0JYWWxob05GWlVSbE5TTWtaWFYxaGtXR0pIZUZsV2ExWnlaVVphVmxwR1pGZGlSVFV4VlZkNGQxUnRSbkpYYkd4WVZteGFjbFZxUVRGa1JsSlpZa2RHVTJKclNsQlhWbEpIWkdzeGMxZFliR3hTVkd4VFdXeFdkMDFHVlhsbFJ6bFdUV3R3V2xWWGREUlpWbHB6VjJ0a1ZWWXphRkJXYlhoVFl6RlNkRkp0YUd4aE1Xd3pWbXhTU21WRk5VZFdhMlJVWVRKU1ZGWnJWbUZYVm14eVdrWk9WRTFXU2xaVmJUVlBWREpLVm1ORmJGVldiRlV4Vm1wR1MxZFdSblZhUm1SVFlraENlVlpzWkhwbFJrcHlUVlpzVm1KR1dsaFZiR2hEVlZaa1Yxa3phRTVTVkVJMFZsZDRWMVpIUlhsVmJUbFdZbFJGTUZwVldsZFdNVlp6Vkd4V2FWSllRa2hXYlRCM1RWWmFjMU51U2s5V1ZUVmhXV3hvYjFWR1ZuRlNibVJVVWpCYVNWVnRlRTlVYkZwWVQwaG9WMVpGYTNoYVJFcFhZekpKZW1GSGJGUlNiSEJXVjFkNGIySXhiRmRYYmtaVllYcFdUMVJXVlRGV01XUnlWbFJXYUZKcmJETlVWbEpYVmpKS1NGVnVTbFpsYTBZMFdrVmtWMUpXVW5OVmJXeHBWMGRvUlZaclkzaE5SMDE0VTJ0a1YySnNTbGxaV0hCWFkwWmFjMkZGVG14aVJuQkdWVmQ0VDFadFJqWldiR2hhVFVad2RsWnJXbUZTYXpWWVVtMUdWMlZyVlhkWGExWmhWVEpOZUZadVNtdFNNbWhZVm10V1lWZHNXbk5YYkU1U1RWWktNRlV5ZUdGVWJFNUlaVVphV21KSGFFUmFWbHAzVWxaR1dWcEhlRmRoTTBGM1YxWldZV1F5UmtoU1dHUlhWMGRTV0ZWdGVHRldSbFowWlVoYWJGSnJXbnBXVjNoTFZqSldjMWR1V2xkaVZGWXpWbXBLVG1WSFRrWlhiRlpvVFVSV2RsWlhNREZSTVU1WFYyeG9UMWRGTlZkVmFrSmhWMVphUjFWck9WZFNiSEJaVmxkME5GbFdXbk5qUkU1WFRVWndURnBHV2s5ak1VWjBaVVprVjFZelRqUldiRkpIVmpKRmVGUlliRmRpUjFKeFZXMHhiMVpHYkhSa1NHUldWbTVDV0ZadGRIZFVNVnB5VGxaa1dsWldXWGRaVmxwS1pVWk9jbU5HWkdsV1JsbzJWMVphYTFJeFduTlRibFpVWWtkb1ZWVXdWa3RVVm1SWFYyMUdhMDFXY0ZoWk1GSmhWVzFLUmxOc2FGVldiSEF6V2tSR1lWTkhUa1prUmxab1pXeGFXVmRVUW05U01WbDRXa1ZvYkZJd1dtRldhazVUWVVacmVXVkdUbXBpUmxwNVdrVmtiMkZIVm5OWGFsSlhZV3RhVkZacVJsTmpNVTV5VjJzNVYyVnRlRnBXYlRCNFZURk5lR05GVmxKV1JscFVWbTEwWVZkc2JGWlhhMDVwVW14d1YxbFljRWRXYXpGWFYyNUtXRlpzVmpSV01GcFBaRlpXYzFadGFHaE5TRUl5Vm0wd01XUXlUWGROVm1SVllrWndXVlpyV21GalJteHlZVVZPV0dKR2NGbFVWbVJIVjBkR05sSnVhRnBoTVVwSVZqQmtTMVpXU25WalJuQnBWMFpHTTFaWGRHdFNiVlpYWTBWb2JGSXphRmhXYkZwM1RsWlplV1JHWkdoTmEydzFWa2QwYjFaWFJuTlhhemxXVmtVMVZGWXllRk5YUjA0MlVtMTBhVkl4U2paV01uUldUbGRHZEZOcmFHRlNSbkJZVlc1d1JrMUdXWGxqTTJSc1VtMVNlRlp0ZUc5aFZrcFZWbXBHV0ZaRlNsZFViRlV4VmpGS2RWWnNTbWxXVm5CMlZtMXdTMkl3TUhoYVJtaE9VMGRvY1ZSV2FFTmxiR3h4Vkc1T1YwMXJXbmxWTW5ONFZteGFSbU5HVWxWaVdHaHlWbXBHZDFOR1NuUmlSazVwVmpGRmVGWnJXbUZpTVd4WFlrWmtWRmRIYUZoWmJYaGhWbFpTVjFaVVJteFdiVko0VlRKNGExUXhXbkpYYWtaYVlUSlNTRll3V2t0amJVcEZWV3hvVjFKWGQzcFdSbFpoWkcxUmVWTlljR2hTYkZwdlZGVm9RMVpXWkZkVmEyUmFWakJ3V0ZZeWRHdFdNVnBIVjJ4U1YySllVak5XYkZwclYxZE9TR1JHVW1sU1ZGWkhWbFpqZDAxV1draFNXR2hvWld0YVlWWnFUazVOVmxaelYyNWtUMkpGY0hsVWJGcHJWR3hhYzFkVVNsZGhNWEJ5V2tSR1VtVldTblZVYlhCVFZteHdiMWRzWkRCWlZsRjRZa1pvVGxack5YRlphMlJUVjFacmQxZHRSbFZpUm5CV1dXdGFZVmRIU25WUmJHaFhVbnBHV0ZreWVFdGpWbHB6Vm14a2JHRXhjRlpXTVdRMFdWZFJlRlJyWkZkaWJFcFBWbXhTYzJNeFduTldiRnBPVm14V05GWnRNRFZXVlRGRlVtdHNWMUo2VmxoV2JURkxZekpPU1ZGc1dtbGlhMG8xVjJ4a05HRXlUWGxTYTFwcVVqSjRUMVp0ZUhkVFJtUlhWbTFHVTAxWFVsZFVWbFpYWVZaS2MxZHNWbFZXYkhCTVZHMTRhMk5XVG5KYVJtaFRZbFpLV2xaRVJtdGtNVkp5VFZaa2FsTkhVbGxXTUdoRFZVWmFWVk5zWkZkaVZrcEhWbGQ0WVdGV1duVlJiV2hZWWtkT05GbFhjM2hTTVZaMVZHeGFhRTFzU25kV1YzaFRWbXN4YzFaWWFHaFRSMUpaV1Zod1IyVnNWbk5WYTA1WFZqQndTRlV5ZERCV1ZscEdWMnBPVmsxR2NGQldiRnBMWTJzNVYxcEdUazVOUkVWNlZtMTBVMUl4VlhoVmJsSldWMGRTVDFZd1ZtRldWbXh6WVVaT2FGSnRlSHBXTW5Rd1lXMUtTRlZxUWxwTlIxSXpXVmR6ZUZOSFZrWlhiRnBYWWxkb1VWWlVTalJUTVVweVRWWnNZVkpzY0ZSWmExWmFaV3hrV0UxSWFGWmlWbHBaVlRKMGMxWXlSWHBWYms1WFlXczFWRnBHV210ak1rWkpWR3hLVGxaV2NGbFhWRUpoWXpKR1IxTlljR2hTTUZwb1ZtMHhVMk5zY0VkWGJrNVhUV3RhUjFaSE1XOWhWbHBZWkhwR1YxSXphSEZhVldSSFVqRmtXV0pHVm1oaE0wSmFWbTB3ZUZWck1VZGlSRnBTWW0xU1VGWnFSa2RPVm1SeVZtcENWazFyV2pCYVZWSkRWakZLTmxKcVRsZGlXRTE0Vm0xek1WZFdTblJoUjNocFVtNUNVbFl4WkRSV01WbDNUbGhPWVZORk5XaFZiRkpYVkRGc1dXTkdaR3hTYkhBd1ZGWmpOVlpYU2xkWGFrSllZVEZLVkZac1dtRldNVTV6Vkd4V1YwMHdOREJXYWtKaFZERmFWMVZ1VG1wU2JWSlBWV3RXVm1WV1duSlhiR1JvVFZad2VWUldXbUZVTVdSR1UyMDVZVlo2UmxSVmVrWlhZMVpPY1ZWdGRGTmhla1Y2VmpKMFZrNVhSWGxUYkdSVVlrZDRWbGxyV2t0U1JscEdWMnRhYkZKck5UQlVWbHB2WVZaa1JsTnRhRmRTYkhCWFZHeGFZVll4Y0VkV2JHUnBVbFZ3V1ZaWE1ERlJNbEp6VjJ0a1ZtRXpVbGhVVjNSaFpWWlNjMkZGWkZoU2JIQkhWakl4UjFZeVJYaFdhazVWVmxad1ZGWnFSbGRqYkU1eVRsWk9WMUpzYnpCV2JHTjNaVWROZUZWWVpFNVhSWEJaV1cxMFlWWnNXWGRoUlU1VFVtMTRlVlpzVWtkV01WcDBWV3h3VmxZelVqTldWRVpMVW14S1ZWSnNXazVXYkhCVlZsWmplRlF4U25SVGExcHBVbXhLY0ZZd1pHOWxWbHBWVVcxR1dsWlVWbGhaYTJoVFlWWktWbU5JUWxwaE1Wb3pWakJhVm1WWFZrWlBWbVJYVmtWYVdGZFVRbXBsUmxsNFUydGFXR0V4U2xkWmJHaHZWa1pyZDFkdVRrOWlTRUpIV1RCYVMxUnNXbGxSYWtKWFlURktTRmxVUmt0amF6VlhWMnM1V0ZKV2NGWldiWFJXVFZaV1YxZHVSbEppYlZKeFZtMTRSMDVHV2xoamVrWm9UVVJHUmxaWGNGZFdNVm8yVW1wT1dGWnRVa2hhUldSVFVsWlNjMVpzWkdsU1dFRXhWbXRhVjFadFZrZFVhMlJZWWtaYVZsbFljRmRXUmxKV1ZXdEtiRkpzY0VaVmJURXdWa2RHTmxKc2FGcE5SbkJZVjFaVmVHUkdWbk5UYkdSWFVsVndUVmRyVWtkak1rMTVVbXRhVldKWVFrOVpWRW96VFZaYWMxa3phRTlTYkVwSVZXeG9iMVpHWkVoVmJVWlhZa2RTVkZwWGVIZFhSMUpGVld4a1YxWkdXbHBXYWtvMFZqRlZlRmRZY0doU2ExcFlWbXBPYjFkR1ZqWlNiRnBzVW1zMWVsWXllRTloUlRCNVlVVTVWMVpzU2tSVmFrcFBZekZ3Umxac1VtbFRSVXBRVjFab2QxWXhXbk5pUm14cVVsaFNWMVZ0ZUhkVFZtdzJWRzVPV0ZKc2NIcFZNbmhEVjIxRmVHTkljRlZpV0doeVZteGFUMk5yT1ZkYVJUVlRZa2QwTlZadGRGTlJNVlY0VTI1U1ZsZEhVbEJXYkZwaFYxWlpkMXBIT1ZwV2JYaFpWRlphVDJGVk1WaFZiSEJhVFVaVmVGbFVRWGhYVmtaelYyeGthVkpyY0UxV2ExWmhXVlpPVjFWdVVrOVdNRnB3Vld4U1YxSldaRmhrUjNSVVRWVTFXRlpYTlZOaVJrcFpVV3hXVmsxR1ZYaGFSbHBXWlZkU1IyTkZPVk5XUmxwWlYxZDBZVll5UmtkVFdHeHNVbXRLVmxacVRtOU5NV3cyVW14S2JGSnNXakZWTW5NMVZqRmFSbGRxVWxkV2VrSTBWRlZhVW1Rd01WbFRiR1JvWWtad1YxWkdXbUZUTWs1WFkwVldVMkp0VW5KVmJYaGhWbXhhV0dONlJtbFNNSEJLVlZjMVlWWXhTWHBoU0VwWFVqTk5lRlpxU2t0VFZsWnpWbXhrVTFkRlNtOVdNVnBoVmpGS2NrNVdaRlZpUm5CV1dXdFZNVlF4Vm5GUmJVWlVWbTE0ZVZsVmFHdFdWbHB6WTBWYVYySlVRalJXTUdSSFkyMU9SMkZHVmxkV2JrSXhWMnhhVms1V1pGaFVhMlJwVWxSV1QxWXdWa3ROYkZsNFZXdDBhazFyY0RCVk1qVlBZVVV3ZVdWR1JsZE5SbkJvV1ZWYWMxWXhjRVpQVjNocFVsUldXRlpyWkRSVU1XeFlVMnRvYTJWcmNGbFpiVFZEVmtaYVJWSnRSbE5pUjFJeFZrZDRWMkZYU25KVGEzaFlZa2RSTUZreU1WZFdNVnB6Vm14YWFHVnRlRmxXVjNoclRVVTFjMWRZYkd0U00xSlZXVmh3UjFZeFVuTlhiR1JvVWpGYWVsVXllRWRXTWtWNFZtcFNWVlpGV2xSV01HUlBVbTFTU0dGRk5WaFNWV3d6Vm0xNGFtVkZNVWRpUm1oVFlteEtWbGx0TVZOV2JGSlZVMnBTVWsxWGVGWlZiVEExVkRKS1JsZHNXbFppV0doRVZtcEdTbVZzVmxsalJtUk9ZV3RKTUZadE1YcGxSbGw1VTJ0c1ZtSkhVbGxWYWtaTFZVWmFkR1JIUmxSTmF6VklWbGMxVDFsV1NsaFZia0pYWWtaS2VsVXhXbUZqTVZaeVZHeGFVMkpIZHpCV2JYaHZaREZhVjFkdVRsUmhlbXhvVld0V1JtVkdVblJsU0Zwc1lraENSMVJzV210Vk1rVjRWMVJLVjFaRldsaFdWekZTWlVkSmVtRkdUbWhOYm1oVVYxY3hOR1F5VGxkV2JrWlRZbFZhVDFadGMzaE5NVnBJWlVVNVdsWXdXVEpaYTFwelZtMUtSMU5zVWxkTmFrWklXa1ZhVjJSV1ZuTmhSMnhUWVROQk1WWnJaRFJXYXpWWFYyeGtWV0pIZUc5VmFrSmhWa1pXY1ZKcmRHdGlSbkJJVjJ0b2EyRnRSalpSYWs1VlZteGFkbFl3WkV0WFZsWnpVbXhhYUUxV1dYcFhiRnBoWVRGWmVGWnVUbUZTTW1odldsY3hORmRzV2xWVFdHaHJUVlpHTlZVeWVHRmhWazVKVVd4V1YySkdWWGhXUlZwM1ZqRmtkVlJ0Y0ZOaGVsWmhWbFprTkZFeVNrZFhiRnBxVWtVMVdGUlhjRWRsYkZaWVRWVndhMDFyY0VoV1YzaGhZVlphZFZGc1FsZFdNMUpvVm0xemVGWXhWbGxoUmxwb1RVUldkMVp0TURGUk1WcHpWMjVTVGxkRk5XRldiWGgzVWpGV2RHTkdUbGRXTUZZMVZsZDBNRlpXV25OalNIQlhUVVp3Y2xac1dsZGtSa3B6V2taT2FFMVdXVEJXYlhCTFRrWlZlVkp1VWxkaE1YQlBWbXRhZDFVeFduSldWRVpXVm14YWVWWnRkR3RVTVVwelUyNXNWMVo2UmpOWlYzaExWMGRXUm1OR1drNWhhMVYzVjFaU1IxUXhTWGhhU0VaWFlraENjRlpxVG05U1JtUllUVlJTVkUxV2JEUldSelZQVmxkS1IxZHJPVmRpUjJoRVdrVmFZV05zVm5KYVJrcE9WbGhDTmxac1l6RlJNV1IwVm01U1ZtRXpVbGRXYTFaaFZFWnNjMWRzU214U2JrSkhWakp6TlZZeFdrZFhhbEpYVmtWYVZGWkVSbGRTTVdSWldrZHdWRkpXY0ZkV1JscGhVekZSZUdORlZsSldSVXB6Vm0xNFlVMUdhM2RhUldSb1VqQndXbFpXYUhkV01VcHpZMFpTV2sxdVRqUlZiWE40Vm0xR1IxcEdaRk5XUmxwUlZteGtkMUZ0VVhkTlZtUldWMGRvYUZWc2FFTlVNVnAwVGxWT1YySkhVbmhWTWpFd1ZteGFjMVpxVGxaTmJsSk1WakJrUzFaV1duSmxSbkJvVFZoQ05sWnFRbUZXTVdSR1QxWmFhMUpyTlc5WmJHUnJUbXhhY2xwRVVsWk5helY1Vkd4YVlWUnNXbGhoUm14YVlrZG9kbFpWV21GalZrWjFXa2R3VGxacmNGaFdiR1F3V1ZaU2MxTnVVbXhUUjJoWVdXeFNSMlJzWkZkYVJXUnJVakJhU2xaSGVGZGhSVEZXWTBSYVdGWXpVbGRVVmxVeFl6Rk9jMkpIY0ZOV1JscFZWbGR3UW1ReVVYaFhhMlJYWWtVMVZGbFljRWRTTVZKelZXeGthRTFFUmpCV1YzaERWbTFGZUZkclpGVldiSEJVV2tWa1MxTldUbkpQVlRWVFRUSm9TVlpzV21wTlYwVjRXa2hLVGxkR1dtOVZhMVozV1Zad1dHUklaRmROVjNoNFZWYzFhMVV3TVVWaVJYQllZVEZWTVZacVJrcGxiRkpaWVVaa1UySkdjSGxXTVZwclV6RktjazVXWkdoU2JFcHdWakJrYjFWR1dsaGtSbVJYWWxaR05GZHJXbTloYkVwMFZXMDVWbUpVVmtSYVZWcHpWbXh3UlZWc1ZrNVdXRUpLVjJ4V2IxUXhXbGhUYmxaU1lUSlNhRlpxVGs5T1JsWnpWMjVPVDJKR1dubFViRnBQVlRGYWMxZFljRmRoTWsxNFdYcEtUMk5yTlVsYVIyeFRWak5vVUZaWGNFdFZNazVYWWtoT1dHSklRbkpVVm1oRFUwWnNWbFpxUW1oTlZuQlpXbFZXVjFZeFdqWlNiV2hYVmxad1lWcEVSbUZXVmtwelZtMXNXRkpWY0UxV2ExcFRVV3MxVjFwRlpGVmliRXB4VlcxMFMxZEdWbk5WYTFwc1lrWndTVmt3VmpCV2F6RnlWMjV3V2sxSGFFaFpWVlYzWlZaV2NrOVdaR2hOYkVreVYydFNSMVV4V25OalJXUllZWHBXVDFWclZtRlRiRnB5VjJ4T1YwMVdXa2hXTVdocllVVXdlV0ZHYkZwaE1YQk1Xa1phVTJOV1JuVlViRkpYVmtWYVNsWXlkR3RTTWtaWVUydGthVTB5YUZoVVZscExWVVphVlZOck9WUlNhelZhV1d0Vk5WVXdNWE5UYlVaWFVtMU9ORlpVU2s1bFIwNUdWMnhvVjFKc2NIaFdWM0JDVFZaT1IxVllhR0ZTZW14aFZtMTBjMDVHVlhsalJtUllVakJ3U1ZsVldrTlpWbGw2VlZoa1ZtRXlVa2RhVmxwM1UwZFdTR1ZHWkZkV2JrRXhWbTF3UTFVeFRYaFVia3BQVm14d1QxVXdaRFJXTVZweVZtNWtWbFpzY0hsV01qVkxZVEF4VjFOdWNGZFdNMUp5V1ZWa1IwNXRTa1pYYkZwWFpXdFplbFl4V21GWlZrbDRVMjVHVldKR1dsaFphMVozVmtaYVNHUkhSbXROYkVwSVZqSjRjMWxXU25WUmJUbGFZa2RTZGxwWGVGcGxWMVpIVkcxd1RtRXhjRWhXUjNoWFZqRmFTRk5zYkZKaE0xSlhXVlJHUzFKR2JIUmxSM1JYVFd0YVIxcEZaRFJXTWtwWllVZEdXRlpzU2t0VWJGcFRVakZrY21KR1ZtbFdSbHBXVjFaU1IyTnJNVWRWYms1WVltczFXRlpxUWxwTmJGVjVZM3BHYUZJd2NGZFVWV2h2VmpBeFdGUnFVbGRTTTAxNFZtMXplRlpXWkhOVGJHUlRWa1phZGxac1pIZFJhekZZVld0a1ZsZEhhRmRaVkVKM1l6RldjMVZ1VGxkaVJuQllXVlZrTUZkc1duTmpSV3hYVWpOQ1VGWXdXbXRUVmtaMVlrWldhVkp1UWpaWFZFWmhXVmRTU0ZaclpGSmlSWEJQVld4YVZtVkdXbFZTYkdSVlRWWldNMVJXVm05Vk1rVjVZVWhDVmsxSGFFUldSM2hoWTJ4V2MxcEhiRmRpVmtvMFZsUktOR0V4VW5OVGJsSmhVa1phV0ZWdWNGZGhSbXhYV2tWMFYwMXJOVXBYYTFwdllWZEtXV0ZFUmxoV1JVcFhWR3hWTVZZeFNuVldiRXBwVmxad2RsWnRjRXRWTWxaWFYxaGthRk5IVW5GVVYzUmhVakZSZUZkc1pGaFNiVkpKV2xWYVExbFdXalpTVkVKYVRVWndjbFl4WkU5VFZrNTBaVWRvYkdFeGNFaFdha293WVRBeFIxcElTazVYUlRWdldsZDBZVlpzV25OWGEzUlRUVlpLZWxac1VrZFZNVnB5VjJwQ1lWWldWVEZaYTJSR1pESk9TV0ZHWkZOU1ZuQlZWMWh3UzFJeFduSk9WbVJvVW0xU1dGVnRkSGRVUmxwWFZXdE9WMkY2VmxoV1IzaGhWbGRLV1ZWc2FGWmlXRkpvVm1wR1dtVlhVa2hTYkdoWFZrVmFSMVpYTVRSU01WcDBVbGhvV0dKSFVtRlpiR2hUWld4V2NsZHRkRmhTVkVaWFdUQmFTMVJzV2xsUmFrSlhZVEZLU0ZsVVJrdGphelZYVjJzNVdGSldjRlpXYlhSV1RWWldWMWR1UmxKaWJWSnhWbTE0UjA1R1dsaGpla1pvVFVSR1JsWlhjRmRXTVZvMlVtcE9XRlp0VWtoYVJXUlRVbFpTYzFac1pHbFNXRUV4Vm10YVYxWnRWa2RVYTJSWVlrWmFWbGxZY0ZkV1JsSldWV3RLYkZKc2NFWlZiVEV3VmtkR05sSnNhRnBOUm5CWVYxWlZlR1JHVm5Ka1JtUm9UVlZ3UlZkWE1UUlVNazVYVW01T1lWSnNjRTlXYlhoM1RsWmFSVkp0UmxWTlYxSlhWRlpXVjJGV1NuSmpSbVJhWVRGd1YxcEVSbk5rUjFKRlVXeGtVMkV4Y0RSV01uUlhaREZXY2sxV1dtcFRSa3BZVkZaa2IwMHhiSFJqZWtaVFlYcFdXRlp0ZUU5aFZtUklZVVpHV0dKSFVYZFpla0V4WXpGd1IxWnNVbWxTV0VKUlZsZDRVMVl4V25OV1dHaFdZWHBzWVZadGRITk5NV3hWVkcwNVYxWXdjRWhWTWpWelZsZEZlRlpVUmxkaVJuQlVWakZhZDFKck5WaGhSMmhPVFVWdk1WWnRjRXBrTWxaSFZsaHNVMWRIYUhGVk1GWmhXVlpTV0UxV1RsWmlSbkJXVlZkME1GUXlTa2xSYTJSYVZsWlpkMVpIZUVwa01rcEZWbTFHVjFZeWFHOVhWbEpDWlVkTmVGcElSbGRpUmtwUFZXMDFRMUpXV2xWU2JVWlhUVlZzTTFReFdtdFZiVXBIWTBoT1YyRnJOVTlhVjNoV1pVWmFkR1JIY0U1aE0wSllWMnRXVjJNeFdsaFNia3BZWWxWYVlWbHNhRTVrTVhCRlVtNUtiRll3Y0VsVWJHUnZWR3haZVZWVVJsZGhNWEJVVmxSR1YxSXhUbkphUm1Sb1lrVndXbGRYZEdGVE1rNVhZMFprVjFkSFVuTldiWGhMVFVad1JsZHJUbFpOVlhCNlZqRlNSMVl4U1hwUmEzaFhWa1Z3U0ZadGN6RldNVnB6V2taa1UySklRbE5XYkdRd1lUQXhSazVZVGxaaVJuQlhXVlJPUTJNeFduUk9WVTVVVm14c05WUldVa05YYkZweVlrUlNXbFpGTlROV2JGcExWbXMxVmxSdFJsTlNWV3QzVmxkMFlWSXhaRmhVYTFwc1VtMVNWRlZzVmxabFJscFZVMjVrVlUxclZqVldSM1J2VmtkS2NsTnRSbFZXUlVwTVZYcEdWbVF5UmtaUFYyeHBVMFZLTmxaclpEQlVNa1pYVTFoa2FsSllRbGhWYm5CR1RVWlZlV1ZGT1ZSV2JFb3dWR3hhVTJGRk1WaGpNMmhZVmpOb1YxUldaRTlXTVdSelZteGthR1Z0ZUhaWFYzaHZWRzFXUjFkcmFFNVRSMmhVV1d4YVlXVnNhM2RYYlRsWFZteHdSMWt3V2tOWGJGbDZZVWRvV21GcldsUldNV1JQVTBVMVdHVkdUbGRTVm5CSVZtMTRZVlV4VFhoVmJrNVlWMGRTYjFSVVRrTlhWbHAwVFZaT1ZVMVlRbGxaZWs1dlZrWktjMk5HV2xaaVdFMHhXVlZhWVZac1dsVlNiRnBPVm14d2VWWnRjRUpOVms1SFZXNUthRkl6YUZWVmJUVkRZakZhV0dORlpGZE5iRXA2VmtjMVMyRkdTbkpPV0VKVlZqTlNhRll5ZUdGU01rWkhWR3hhVjAxSVFrZFhWM1JXVFZaYWNrMVdaRmRYUjJoWFdXeG9iMU5HYkRaU2F6bHFZa2RTZWxVeWVHdFhSa3BWVmxSS1YxWkZXbGhXUkVaV1pVZE9TVk5zUWxkaVYyaFZWbTEwWVZsV1ZrZGlSbWhyVTBWd2MxbHJXa2RPUm1SeVZtcENhRkl3V1RKWmExcGhWakZLZEdGSVNsZFNSVVkwV1hwR1QyUldTbk5oUjJ4WVVsVnZNVll5ZEZOUmJWWkhWMnhvVTJGc2NGTlpXSEJYVmtaU1YxZHNaRTlpUm5CSVZtMHhNRlpYUmpaV2JHUlZUVlp3ZGxacldtRlNiR1IwWVVaa2FFMXNTbmxYYTFKSFZXMVdkRk5yV2xSaVYyaFBWbXBLYW1WV1duTlhiVGxyVFZaR05GVXlkR3RXTVdSSlVXeGFXbFpGY0ZSV2FrWlRWbXhhV1dGR1VsTmlTRUYzVjFSQ1ZrMVdWWGhUV0hCVllXczFXRlZxVGtOVVJsWTJVMnRrVTAxck5VZFdiVEZ2VkdzeGRXRkhhRmhXYlZGM1ZXMHhWMUl4Vm5OV2JGSm9UV3hLZDFaWE1IaE9SbHB6Vm01T1ZtRjZiRlpVVmxaelRrWnNjbFZ0UmxkU2JIQllWVzF3VDFkSFJuSlRhazVXVFZad1dGcEZWVFZYUjBaSFlVWk9WMUpXV1hwV2JYaFhZVEF3ZDA1V2FGUmlhelZ4VlcweE5GWXhiSE5YYm1ScVVteEtWbFZXVWtkaFZscDFVV3RzVlZac1duSlphMXBoVjFaV2NsWnNhR2hOYldoRlYxWmtORkp0VmxkVmJsWnFVbXhLV0Zac1VsZFdWbGw1VFZSU2FrMUVWbnBaTUZKaFZtMUdObUpHYUZaaVJuQXpXbGQ0WVZORk5WbGFSbEpwVm14d05sZFdVazlqTVZwelYydGtWR0pGU2xoWlZFWmhaVlp3V0dWSGRHcGlTRUpIV1RCVk1WWXhXa2RYYkdSWVZtMW9NMVpVUmxkU01XUnlWMnMxVjFKVVZsZFdiWEJQVVRGU1IySkdWbE5pYlZKeVZXMTRZVTFHY0VaYVJXUm9VakJ3VjFSc1VrOVdNVXBHVGxod1ZsWjZSa2RhVlZwMlpXMUtSMkZHYUZSU1ZYQjJWbXhrZDFGck1WaFVhMlJoVW0xb1QxWnNhRU5WUmxwelZXNU9VMkpHYkRSWlZXaHJWMGRHTmxKdWNGZGlSa3BJVmpCYWExTldSblZXYkZaWFlrWlpNRmRVUm1GVU1sSklWbXRhVDFZeWFHOVVWelZTVFZaYWNscEVRbFpOYXpFMVZXMDFUMkZGTUhsbFJsSmFZa2RTZGxaRVJsTlhSMVpIV2tVNWFWSlVWbGhXYkZwdllURnNWazFWYUd4VFIxSmhWbXhrVTFWR1dYaFhhM0JzVW1zMVZsWlhlR3RVYXpCM1UydG9XR0V4V2xkVWJGcGFaREF4VjJGR1ZtbFNNMmhWVmtaYVYyTnJNVWRYYTJSWVlsVmFVRlZ0TVRCT1JtdDNWbTEwYVZKcmJETlViR1J2Vm1zeFNHRklTbFZpUm5CaFdsY3hUMUpzVG5Sa1JrNVhVbXh3U2xacldtRmhNVkY0V2taa1ZGZEhhRlZXYTFwTFZteGFjVlJyVGxoU2JWSlpXWHBPYjFVeFNsVlNhMXBXWWxob2VsWnRjM2hrVmxaMVdrWmtVMUpVVmpaV1ZsSkxVekZrUjFSc2JHcFNiRXB3VmpCa2IyRkdXblJqUlVwT1ZqRktlbFpIZUdGV1YwcFZWbTA1VlZadFVuSlViRnBhWlVaV2NtUkdWazVXYmtKS1YxaHdUMk14V2xaTlZtUlVZbTE0VmxacVRtOWxiRnB6VjJ4T2ExSXhXa2haTUdRMFlWWkplbFZVUmxkaE1sRXdXVlJHUzJSR1duVlRiRUpYVm14d1ZWWnFRbXRWTVZaSFZtNUtXR0pyTlZCVmJURlRWMVpyZDFwRVFtaFNhM0F3V2tod1MxWXhTblJoU0VwWVZteHdhRlZxUm1GWFYwcEhWV3hrVjAxVmNFcFdNbmhyVFVkTmVGTnJaRmRpYkVwWldXdFdTMVpHVm5OaFJVNXJZa1pzTlZwVldrOVdSMFkyVm10a1ZWWlhhSHBXVkVaclUwZEdSMUZ0UmxkTk1taHZWMWR3UjJFeVVraFVhMlJVWVhwV1ZGbHNhRzlXTVZwelYyeE9WRTFXU25sVVZtaFBZV3hLTm1KR1dsVldWbkJNV1ZWYWMxZEhUalpTYkU1WFlsaFJNbFl5ZEdGa01WbDRVMjVPV0ZkSVFsaFZibkJEVGtaYVdHTjZWbGROVlZveFZWZDRZV0ZXV25WUmJUbFlWbTFSZDFreU1WSmxSbFpaV2taYWFFMUlRbEJYVjNSclRrWmtWMWRzYUU1WFJUVldWRlphZDFJeFduTlZhMlJZVWpCd1NWWlhNVzlYYkZsNlZGaG9WMkpHY0hKV01XUlBVbXM1Vms1WGJGUlNWVzh5Vm0xMGFrMVhVWGhWYmtwUFZteHdUMVV3WkRSWFZteHpZVVpPVlUxV2NIbFhhMUpUWVd4S2MxTnNjRnBOUmxwb1dWZDRTMWRIVmtaalJuQnNZVE5DZVZkV1ZtRlhiVlpJVTJ0c1dHSkdTbGhaYkdSdlVsWmtjMWR0Um10TlYxSklXVEJXYjFkSFNsaGxSbWhWVmxad2VsUlVSbHBsUmxaeVpFZHNhVlpYZDNwWFYzUnZVVEZXUjFkWWFGaGhNMmhYV1d4b1EyVnNjRVpYYkU1WFZtczFlbFpITVc5aFZrbDZXak5rVjFaRmJEUlpla1pYVWpGa2NtRkdjRTVOYm1oWFZtMTBWMlF4VmtkaVNFcFhWa1phV1ZWdGVFdFdiRnBZWTNwV1YwMVZjRmxhU0hCSFZqQXhkV0ZHVWxaTmFrWllWbTF6TVZkV1NuTlhiR1JUWWtoQ2IxWnJXbXRsYXpGWVUxaG9ZVkp0VWxkWldIQnpZMFpXYzFWclRrOVNia0pYVjJ0Vk5WWldXWGRYYkdoV1RXcENORll3WkV0WFZrWnpVV3h3VjFKV2NEVlhiRnBoVkRKU1NGTnJaR3BTTW1od1ZqQlZlRTB4V25KWk0yaHJUVlpHTlZWdE5VOWhiRXB6VjI1Q1ZtRnJOVVJXVmxwWFkyeGtjMXBGT1ZkaVJYQmFWa1phWVZsWFNrZFhiRlpUWW0xb1dGUldXa3RTUmxwV1YyeHdhMDFFVmxwVmJYaHZWakpLVjFOcmFGaGlSMUV3V2tSR1lWWXhWblZWYkZacFVqTm9WRmRzWkRSVE1sWlhWMWhrVm1FelVsbFpiRnBoWld4cmQxWnRPVmRXTUhCWldsVmtSMWR0U2tkWGJteFZWbXh3VTFwRVJsZGpNazVJWlVkc1UwMHhSWGhXYlRFMFZURlplRnBJVWxkaWJFcGhWRlJLYjFac1duRlVhMDVWVW0xNGVWWnNhRzloYkZweVRsWmFWazF1VFRGV1ZFWktaVzFHU1dGR1pFNVdhM0JOVmxkd1MxSXhTbkpOVld4cFVtMVNXVlV3Vmt0WlZscFlUVVJHYUUxRVJsaFdSelZMVjBaYVIxZHVRbGRpUmtwRVZHeGFZVmRGTVZsYVJtaHBWbGhDV0ZkVVFtOVJNVnBXVFZaa1ZHSnNXbFpXYWs1UFRURndWMWRzVG10U01WcElWVmQ0YTFSc1NrWlNhazVYWVRKUk1GWlVSazlrUmxweldrZHdVMkpHY0ZaV2FrSnJUa1pXUjJKR2FHeFNWbkJQVm0weFUxWnNWWGxqZWxab1VtdHdNRnBWV21GV01VbzJVbFJDVjFKNlJsaFdha1pMWTFaT2MxVnNaRTVpYlZFeVZtcEtkMUV5VVhoVFdHUlFWbTFvVDFac1VsZGlNV3h5Vm14YWEwMVdjRWhXYlhoUFYyeFpkMWRyYUZwTlJscDJWbXRhWVZKc1pISlBWbVJvVFd4RmQxZFljRWRoTWxKR1RWWmFUMVpVVmxoV2ExcGhUa1phY2xkc1RsVk5WM2haVlRKNGExWXhaRWxSYkZwWFRVZG9SRnBXV25kWFIxWkpXa2QwVTJKR2NHRlhWbFpoVVRGWmQwMVZhR3RsYTNCWVZXMTRkMVZHYTNsbFNGcHJUV3MxU2xWWGVHOVdNREZ6VTI1b1YxSnNTa2hWZWtFeFZqSkZlbHBHY0d4aVJuQjZWMVpTVDFVeFNsZFhiR2hPVmpCYVlWWnFRbUZsVm14VlZHMTBWMVpVUmtoVk1uUlBWbFpaZW1GSWNGZE5SbkJZV2tWa1MxSnJPVmRhUms1WFlrWlpNRlp0Y0V0T1IwVjRZa1pvVTJKcmNGQldiWGhoVjFaWmQyRkZUbFpTYkVwWldsVm9hMkZyTVZkVGFrWmFUVVpWZUZaRVJtRldWa1p4Vm14a1RtRnJWak5XYTJRMFdWWk9TRlpyYkZKaVJscFpWVEJXUzFOR1pGbGpSVTVxVFZWd1NGWnROVk5YUjBZMllrWlNWbUpHU2tSVVZFWmhVMGRXUjFSdGFHaGxhMXBKVjFSQ1lWWXhXbk5hUldoV1lsZG9XRmxYZEVkT1JsSlZVbXhLYkZKc1ducFZNbk14Vkd4WmVsb3paRmRXZWtJMFZGVmFWMUl4WkhKWGJYQlVVbFZ3VjFadGVHRlRNVmw0WTBab2JGTkZOVmxWYlhoM1RVWnNWbFpVUmxkTlZXd3pWRlpTVDFZd01YRlNhazVYVW5wR1VGVnRNVk5TTVZaelUyMW9hVlpyY0UxV2JGcFRVakZOZVZOc1pGWmlhelZYV1d4U1YyTXhXbk5WYTJSWFlrZFNNVmt3V210V1ZURnlWMjVzVmsxcVZrUldiRnBhWld4R2RGSnRSbGROTW1nMlYxUkdZVlF5VWtoVGExcFFWakpvY0Zac1VsTk9iRnB5VjJ4T1ZFMVdTbmxVVm1oTFZERmFkR0ZHVmxwaVIyaFVWbFZhWVdOV1JsbGFSVFZUWWxaS1dWWnNaREJOUjBaSVVtcGFVMkpIZUZkWmEyUlRZMnhhVjFkc1dtdE5WVFY0VmpJeFIxVXlTbGRUYXpGWVlrZE9ORlpVUms5V01WSnpZVVpDVjFkR1NsVlhWbU40VGtVeFIxZHJaR0ZUUjFKWFdWaHdWMUl4VWxkV2JHUllVakJ3V1ZsVlpHOVdiVVp5VTI1c1lWWldjRlJXYWtaWFpGWlNkR0pHVG1saE1Hd3pWbTEwWVZVeFNYaFZXR3hUWW10d1QxVXdhRU5YVm14elZXdGtWMDFXU2xaVlZtaHZWREpLVmxacVdscE5SMUpJV1ZaYVlXTnNaRlZSYkdSVFVsWndlVlpVU1hoV01rNXlUVlprVm1KWVVrOVpiRnBMWlVaYVIxVnJaRlJOUkZaWVdWUk9hMWR0Vm5OWGJrNWFWa1UxVkZWc1dtRlhSVEZZVW14d1YwMUdjRFZYVmxKUFlURmFWazFWWkZSaE1EVldWbXBPYjJWc1dYZFhiR1JyVWpCd1IxUXhXbXRWTVZwelZtcFNWMkZyYnpCWlZFWnpWMFpLZFZOck9WZGlSbkJhVm1wQ2IxRXhWa2RWYkdoc1UwZFNjVlJXV2t0TlZtdDNWbFJHVlUxV2NGWlZWM0JYVmpBeGNWSllaRmRTTTJob1ZUQmtWMU5XUm5OV2JHaFVVbFZ3U1ZZeGFIZFJNazE0VTJ0a1YySnNTbGxaV0hCelZrWldjMVZyVGs1TlZuQkpXbFZhVDJGSFJqWlNhMmhhVFVad1dGWnRlR3RUUmxaMFlVWmthR0V3V1RCV1JsSkhWVzFXUjFadVRsUmhlbFpQVm1wT2JtUXhXbGhOU0doT1VteGFTRll5ZEdGaGJFNUdVMnhhVjJKR2NFeFdha1ozVjBkV1NWUnNhRk5pU0VGM1YxWldWazFXV1hoVFdHUk9Wa1UxV0ZSWGNFZE5NVnBJVFZVNVUySlZNVFpaTUZwWFlVZEZkMk5JYUZoV00yaDJXV3BLVG1WSFNrbFZiV3hUWld4YWRsWkdXbXRpYXpGelYyeGthRk5IVWxaVVZsWjNVMFphYzJGSVpGZFdNRlkxVmxkNGExWldXbGRXYWxKV1RVWndhRnBGWkU5U2F6VlhWR3hPVGsxRVVqWldiWFJyWkRGTmVGUlliRk5oTWxKeFZXeGFZV0l4VWxWVGFsSmFWbTE0V1ZwRlZtRmlSa3B6VTJ4YVZrMXVVbkpaVmxwTFpFZFdSMWRzV21sU2EzQlJWbXRTUjFOdFZraFRhMVpZWWtaS1QxWnNVbGRPVmxwSVkwVk9hazFWY0VoV2JUVlRWMGRHTm1KR2FGWmhhM0JUVkZaYVlWSXhaSE5VYld4b1pXeGFXRlpIZUc5U01WWjBVMnhvYkZKVWJHRldhazV2Wld4U2RHVkhkRmhTTURWSFdrVmtiMVl4V2tkWGFsSlhUVlpLVUZsVVJsTmphekZaVTJzMVZGSXphRmRYVjNSclZURlNSMkpHVmxKV1JWcFpWVzE0UzFac1dsaGxTR1JYVFZWd1dsVlhOVzlXTVVwelkwaEtWbUpZYURKYVZWcEhZekZXYzFOdGFHaE5TRUkwVmpGa05HRXdOVVpOVldSVlYwZFNiMVZzVW5OVU1WcDBUVlJTVGxac2NFbFpNRlpQWVVkS1ZsZHNiRmhoTW1oTVZqQmFUMU5XUm5OYVJsWm9UVlpaTUZkVVJtRlRNVnBYVm01T1VtSkhVbFJaYkdoclRteGFjVkp0ZEd0TlZUVjVWRlpvUzFSc1RraGxSbFpYVFVkUk1GZFdXbk5YUjFaSlUyMTRhVkpyY0ZoV2JHUjZUbGRHU0ZKcVdsZGliV2hZV1d4U1IyVnNaRmRYYTNSVFRWZFNNVlZ0ZUZkVWJFbDRVMnRvV0dKR2NHaFpla0V4WXpGT2RWVnRhRk5XUlZwVVZrWldWMWR0Vm5OWGExcFhZWHBzVTFSWGVHRk5SbHBZWkVoT1YxSXdjREJXVnpWRFZsWmFSbEpxVW1GU00yaFFXVEo0YTFaV1ZuSk9WbVJYVWpOb1NGWnNVa2RpTWtsNFZtdGtWR0V5YUhGVVZFbzBWbXhhYzFwR1RsUk5XRUpZVm14U1IyRnNXbk5UYWtKYVlURlZlRmxXV21GWFIxSkZWbXhrVTJWc1dYcFdWbU40VmpKTmVWTnJWbGhpUjJoWVZXeGFkMkZHWkZobFIwWlRZbFphU0ZkclduTmhiRW8yWWtjNVZtSkdTa2hVVlZwaFVqSkdTRTlXYUdsU2JGa3lWakowYWsxV1drZFhXR3hzVWxVMVlWWnRlRnBrTVZweVdrVmFiR0pGV25wVlZ6RTBWakZhV1ZGWWNGZGhhMncwV1hwS1MyUkdTbkpoUms1cFVqTm9WMWRYTURGUk1rWkhWMWhrV0dFeVVuSlphMVV4WlZaWmVGVnNaR2hTYkhCV1dXdGFZVll4U2paU1dHUlhVa1Z3U0ZwRlpFNWxiVXBIVm0xb1RsWllRbGxXTW5oWFdWZE5kMDVZVG1sTk0wSm9WVzAxUTFReGJISlhiR1JPVFZad1NGWnRlRTlWTWtZMlVtdGtWVTFXV25aV01HUkxWMWRHUms5V1dtaGhNSEExVmtaV1lXRXlUWGhqUldSWVlYcHNXRmxzYUc5V01WcHpWMjA1YWsxWFVubFVWbHB6VmxkS2NtTkdiRlpOUjJoRVZtcEdVMk5zV2xsaFIzQlhZVE5DVjFac1pEUlJNVmw0VTI1U2EwMHpRbGhVVm1SVFRURlZlV016YUdwaGVrWktXV3RhVTFkR1NYcGhSMmhZVm0xUk1Ga3lNVmRqTVZaelYyeGFhR1Z0ZUhaWFZtaDNWakpXUjFkdVVrNVhSVFZoVm0xMGQxTkdXWGxPVldSWFZsUkdTVlpYZEd0WlZscHpZMGh3VldKWWFFeGFSV1JIVWpKS1IxZHJOV2xpUld3MlZteFNSMVl4VVhoV1dHaHFVMFUxY0ZVd1ZtRmlNVkpWVkd0T2FGSnNXbmxXTWpWTFZHeGFjMU5xUWxwTlJuQk1Wa2Q0WVZaV1NuTmlSbVJUWWtWd1ZWWnJaRFJUYlZGM1RsWnNWV0pHV205VVZsWjNVa1prYzFac1drNVdhM0JaVlcxMGIxUnNXWGRYYkdoV1lrWmFNMXBFUm1GU1ZrWjBaRVprVG1FelFraFdSRVpoWWpGVmVGZHJXbFJoZW14aFdXdGFWbVZHYkZkWGF6bHFZa2RTVmxaWGN6RldNVnBJWlVWa1YxWkZXblpaYWtaWFVqRk9jbUZIY0U1TmJtaFhWbTE0YTFVeFRYaGpSbVJYVmtWYWNWWnRlRXROUm14eVZsUkdhRlpzY0ZsYVJWSlhWakZLTmxacVRsWldla1pZV1hwS1MxSldaSE5oUm1SVFZtNUNiMVl4WkRSWlZrcDBWbXRrWVZKdGVIRlZibkJ6WWpGV2MxVnJaRTVTYkhCSVdWVmpOVmRIU2tkalNHaFdWbnBCZUZadGVFdGphelZXVkd4d1YxSldjREpXUnpFMFdWWmFWMVp1U2s5V01taHZWRlphVjAweFduSlZhMlJXVFZkU01GWldhRzloVms1R1YyeFdWMkV4V2pOV1JFWlRWMGRTU1ZSck9WZGlWa3BhVjFSQ1lXUXhVbkpOVlZaVFlURndXRlZ1Y0VkTk1WcEZVMnRrYWsxWFVqRlZWM2h2WVVVeFZtTkdiRmhXYlZJMlZHeGFUMUl4VG5OaVIyeFRZbXRLZWxkV1VrZGtNbEp6VjJ0V1ZXSnJOVk5VVlZKelZqRnNjbFp1VGxWaVJXdzFWbGMxVTFZeFdrWlRhM1JWWWtad1VGWnRlSGRUVmxKMFlrWmtXRkpyY0V0V01XUXdZakpSZVZKdVNrNVhSVFZaVmpCa1UxWldVbFpXVkVaWFVteEtWMWRyVm10V1JrbDNZMFZ3V2sxR1ZqUldha1pMVWpGa2RWVnNaR2xTYTNCRlZtMXdSMVp0VmtkYVNGWlVZa2RTY0ZWc1VsZFpWbHBIVjIxR2EwMVZWalJXTW5odllrWktWV0pIUmxwV1JXc3hWR3RhWVZOSFVraFNiR1JwVmxoQ1NWZFVRbGRoTVZsNFYxaHdXbVZyV2xoVmExWmhVMFphZEdNemFGZGlSMUo1V2tWVk1WWXhTbFppTTNCWFYwaENTRlpFUmtaa01EVkpXa2RzVTFacmNGaFhWM2hoWkRGV1IxZHVTbUZTTTFKUVZtMTRTMWRHV2xoTlJFWlZUVlp3VmxadE5XOVdiRm8yVW01d1YxSjZSa2haZWtwTFVsWmtjMkZHWkU1TlJYQk9WakZhWVZack1WaFViR1JvVFROQ2FGVnNVbGRVTVd4WlkwVk9UMVpzY0VsYVZXUXdWa1V4Y2xacVRsVmlSbkIyVm14YVlWSXhUblJTYkdSb1RWWnZlbGRVUm1GVk1WbDRZMFZhV0dKVldrOVdiRlozVm14YVYxa3paRTVXYlhoWVYydFdhMVpIU25OalIwWmFWak5OZUZaVldsTldiR1IxVkcxMFYwMUlRa3RXYlRFMFpERlplVlp1U2xoaWJrSlhWRlphWVZWR2JIUk5WVnBzVm14YWVWbFZaRzlXUmtwV1kwaG9XR0pHY0ZSVlZ6RlBZekZ3Umxac1RtaGxiWGhWVjFkMFlWbFhWbk5YV0d4clVqQmFXRmxzVm5kU2JHeHlWMjA1VjJKR2NIcFpNRlkwVmpKRmVHTklTbFZpUm5BelZXcEdWMk14VW5OYVIyaE9UVVZ3WVZadGVHdE9SbXhYVkZob2FsTkZOVmRaYlhSM1ZrWnNXV05HWkZkU2JIQldWVEo0VDJGRk1WWk5WRkpYVm5wV00xZFdWWGhqYkdSellrWmtUbFl3TUhoV1ZFbzBWMjFXV0ZaclZsaGlTRUp6V1ZST1ExZFdXa2RXYkdST1VtdHdTRlp0TlZOWFIwcEpVVzA1V21KSGFGTlVWM2hhWlZkU1IxUnNhR2hsYkZwWVZrZDRiMUl4V25OWGExcFlZWHBzV0ZsWGRFZE5NVkpXVjJ4T1YySklRa2RVTVdSelZURmFSMWRyWkZkV2JIQjJXV3BHVW1WR1RuSmhSMmhVVW10d1dsZFhkR0ZUTVVwSFlrWmtWMVpHV2xWVmJYaDNUVVp3VmxkclRsZE5SRVpJVm0xd1QxWXhTblJVYWxKWFVrVmFlbGt5TVU5U2JIQkhVV3hPVTFadVFsTldiR1F3VmpKTmQwNVZaRlpYUjFKWFdXMTBkMVF4YkZsalJXUlVWbXhXTkZsVmFFOVdWVEZ5VjI1c1ZXSkhhRVJXYkZwaFRteEtjbVJHVmxkTk1ERTBWa2N4TkZJeFpGaFVhMlJxVWpOb2NGVnFUbEpOUmxweFVtMXdiRkpzV25sVVZscHJZVlpLUjJOSE9WWmhhM0IyVmtSR2MyTXhXbGxoUlRsVFlsWktXVlpxUm05aE1rWnpVMnhzVm1KR1dsZFdiVEZTWkRGWmVGWllhR3BpVlZreVZXMTRWMVl4U2xsUmJGSlhVbTFTTmxSc1dtRldNWEJIVm14S2FHVnRlRmxXVjNoaFpESldSMWRyVmxKaVJUVlRWRmQwWVdWc2EzZFhiR1JYWWtkU1NWWlhjelZXTWtWNFkwVmtWVlpXY0hKYVJWVjRWakZrZEdSRk5WZE5NbWN3VmpGYVYyRXdOVWRpUm1SWVlUSm9jMVZ1Y0hOV2JHeFZVbXQwVlZKdGVGbGFWV1F3VkRGYWMxZHFRbGROYmsweFZtcEdTbVZXVmxWU2JHUlRZa2hDVlZkWE1YcE5WbHB5VGxac1UySkZjSEJXYWs1dlZVWmtWMXBFVW1wTlJGWjZWMnRhYjJGc1NsbFZiVGxYWWtaS1dGcFZXbXRXVmxKMFpFWldhR1ZyV2pWV1JsWnZZekZhV0ZOcmFGWmhNMmhoVm10V1JtVkdXWGRYYkU1WFZteGFlbGt3V210Vk1XUkdVMnBTVjJFeGNHaFpWRVpLWlVkT1JsZHRiRk5XYkhCUVZsZHdTMVV4VWtkV2JsSnFVbnBXYzFWdGVFZE5NVnBZWkVoa2FWSnJjRlpaYTFaaFYyeGtTVkZyZUZkU00yaExXa1JLUzFKV1duTldiV3hZVWxWd1VsWXhXbUZXYlZaSVZXdGtWV0pHV2xWWldIQnpZekZzVlZGc2NFNWlSbXcwV1ZWb2ExZEhSalpTYkdoYVlUSm9WRlp0ZUdGU2JHUjBVbTFHVjJWcldqSlhWM0JIVlRGa1JrMVdXazlXTTJoVVdXeG9iMVl4WkZsalJYUm9UV3R3V0Zac2FHdFdSMHAwVld4c1dtSkhVVEJhUjNoeVpERndSazVYZUdsU2EyOTNWMnhXYTAxR1ZuSk5XRkpXWW0xNFdWbFVSbUZqYkd4eFUyczVWRkpzU25oV2JYTXhWV3N3ZUZOdFJsZFNiSEJYVkZaYVNtVkdaSE5oUjNoVFRVWndWVmRYZEdGWlYxWnpWVmhvV0dKWVVsZFphMXAzWlZacmQxZHNaRmROUkVJMVdsVm9TMVl5UlhoalJYaFhZV3RhVUZsNlJuZFNNVkp6V2tkb1RrMUZiM2RXYlhoaFdWWlplRlpZYUZSaVIxSllXVzEwUzJGR1ZuRlNhM1JWVm14d1ZsVXljRU5oVjBwSlVXeHdXbUV4V2t4WlZWVjRWMFp3TmxOc2NGaFRSVXBWVm1wSmVGWXlVa2RqUlZaWFlrZG9XRlJVUWt0V1JscElaRVphVDFacmNGaFdNbmhYVmxkS1JsTnNVbFZXVmtwWVdsZDRZVkl4V25OVWJHaHBWbXh3V0ZaSGVHRmlNVnBZVTJ4c1ZtSkZXbGRaVjNSR1pVWnNjVkpzVGxkaVJscDVWakp6TlZZeFdraGxSWEJYWWtkT05GcEVSbk5XTVU1eVlVZDBVMUpyY0ZaV2JYaGhVakF3ZUZwSVJsTmliSEJ6Vm0xNGQyVkdWbGhOVnpsV1RXeGFNRnBJY0V0WFIwVjRWMjVLVm1WclJYaFdha3BMVWpKR1IxZHRiRmhTYTNBMFZqRmFZVll4U1hsVmJrNVZZbXR3YjFWdGN6RmpSbEpZWkVkR1dHSkdjRWhaVlZwUFZteFpkMk5GV2xwaE1YQllWbTB4UzFJeVRrWmxSbVJvWVRGd1RWWnRjRWRVTWxKSFdraE9ZVkl5YUU5VmJUVkRWbXhhZEdWR1RsTk5iRm93VlRJMVQxWXhaRWhWYkdoYVlURlZlRll3V25OV1ZrcDBVbXhrVTJKV1NrZFdWbVF3WVRGVmVGZHVTbXBTVjJoWFZGWmtUbVZHV1hoWGJGcHNWakEwTWxaSGVGTldNVnBWVm14V1YwMXFSalpVVmxwaFZqSkplbU5IYkZOV1JscFpWbGR3UzFSdFZrZFhhMmhPVjBkU1UxUlhkR0ZXTVZKWFlVVmtXRkp0VWtwVlZ6RkhWMnhaZWxWcVRscE5SbkJVV2tWa1QxTkhUa2hrUlRWVFVsVnJlRlp0ZEdGVk1VMTRWVmhvV0ZkSFVuRlZNRlozVm14c2NscEdUbFZOVmtwNVZqSTFUMVl4V25KT1ZFSmFUVVpWZUZacVFYaFNNV1IxVm14a1YxWnVRbEZXVmxKTFV6Sk5lVlJyWkdsU2JIQndWbXRrTkdReFdrZFZhMHBPVWpGR05GZHJXbTlVTVdSR1RsaEtWMkpVUlRCV01WcFRWakZ3UlZWc1VtbFNWbGt4VmpKMGIxTXhaRWRVYTJ4U1ltMTRWbGxVUm5kbGJGSjBaVWhhYkdKVmNFaFpNR1J2WVZaS1YxWnFUbGRoTVVwRVZsUkdZV05yTVVsYVJrSlhWakpvVjFkWGVHOWlNVkY0Vm01S1dHSnJOVkJXYlhoTFpXeGtjbFpVVm1oU1ZFWkdXV3RXYzFZeFNqWlNibHBYVWpOb1RGVnRlR0ZXVmtwelZtczFVMDFWY0ZaV01WcHJUa2RSZUZOc2FGTlhTRUp2Vld4b2IxZEdWWGRXVkVaclZtMVNXRll5TVRCWFIwcFdZa1JPV21FeGNIWlpWbHBQVTFaR2RWSnNWbGROTW1ob1YydFNSMVJ0VVhoVmJrNVZZbFZhY0ZWcVRtOU9SbVJYVldzNWEwMVhlRmhWTW5ScllVZFdjbGRzV2xwaVIyaEVWbFJHVTFZeFdsbGhSbWhUWWtWd1YxWnNaSHBOVmxWM1RWVldWMkp1UWxoVmFrNVRWa1pXV0UxV1pGTmhlbFpYVm0weGIxVXlWbkpYYlRsWFlsaFNXRlY2U2s5U01WWlpXa2RHVTJKV1NuZFdWM2hUWXpGa1YxWnVUbFpoTURWV1dXeFdkMVl4VW5OYVNFNVhVakJXTkZsWWNFTldWbHB6VmxSR1ZtSkdjRkJXTVdSSFVqRkdjMVJzVGs1TlJGRjRWbTEwWVZZeVJYaFVibEpYWWtad1VGWXdWbUZXYkd4eldrUlNWVTFYZUhwV2JUVkxZa1phYzFOcVJscE5SbHBNV1d0a1MxTkhValpUYkdST1ZtdHdTVlpxU1hoVE1WbDRVMnhzYUZKdGFGbFZNRlpMVFd4a1YxWnNXbXhTTVVwSVZsZDRjMkZHU25WUmJHaGFWak5TVEZSVVJsZE9iRXB5VDFaS2FWWldXVEJXTW5CUFl6RmFSMWRyWkZoaGVteFdWbXBPYjFJeGNGZFhiRXBzVW14YWVsa3dWVEZWTVZwSFYyeGtWMVo2UWpSYVJFWlhVakZPY2xkc1VtbGhNWEJhVjFkMFlWTXhWWGhqUlZaU1YwZG9XRlp0ZUdGV2JGcFlUVlZrYUZac2NIcFdNV2gzVmpBeFdGVnFUbHBoYTNCTVZXcEtUMUl4V25SaVJrNU9ZbGRvVWxac1pEQldNbEY1Vkd4a1dGZElRbkJWYlhNeFlVWnNXV05HWkZkaVIxSjRWa2MxVDFaWFNrZGpSV3hZVjBoQ1NGWnNaRXRYVmtaeVZXeHdWMkpHV1RCWFZFWmhZVEZrV0ZSclpHcFNNbWh2VkZSQ1MwMHhXbkpaTTJoclRXdGFNRlpXYUd0VWJFNUlaVVphVjJFeFdqTldWVnBoWTFaR2RWcEhjR2xTYTNBMlZqSjBWazFXVVhoVGJsSnNVbXh3VjFSWGNFZE5NVnBJWlVad2EwMVhVakJhUlZwVFZqRmFjbGRZY0ZkTmJrSkVXa1JHU21Rd09WWldiRTVwVWxWd1ZWWlhlR3ROTURGSFYydFdVbUpGTlhGWldIQkhaVlpTVjFadE9WZFNiVkpKV2xWYVExZHNXWHBVV0doYVRVWndWRll3VlhoV2JVNUdUbGRvYkdKR1ZqVldiRnBoWWpKUmVGcElVbGRpYXpWdlZGUktiMWRXV25WalJXUldUVlpLV0ZZeU5VOVVNa3BXVjJ0c1dsWldWWGhaVmxwaFZsWktWVkZzWkU1V2JrSlZWMnhrTkdSdFZsZFRiazVvVW0xb1dGcFhNVFJVVmxwWVRWaGthV0pXV2toV1ZtaHJWbTFGZWxGdVRsWmlSa3A2VlcxNGMxZFhUa1prUmxacFVsZDNlbGRYZEZOV01WcFlVMnhzVW1KRlNtRldiWGhYVGtad1JsZHJPVmRXYXpWNVZERmtOR0ZGTVVkaE0yeFhZV3RhZGxwRVJtdGphekZYV2tkc1ZGSnJjRmhXYlhSWFdWWnNWMk5HYUU1V2VteHdWRlphUzFkV1VsZFdWRVpwVW10d01GcFZXbGRXYkZwMFZXNWFWMVpzY0ZkYVJFWkxaRlpPZEZKc1RsZE5WVzk1VmpGU1EyRXhVWGRPVmxwT1ZsWktjbFZ0TVRSVU1WcHpWV3hrVkZKc2NIcFhhMUpUVjJ4YWNtTkljRmRpVkZaUVZsVmFZV1JHVm5OVWJHUnBWMFpKZWxadGVHRlhiVlowVTJ0b2ExSnRVbFJaVkU1RFYxWmFWVk5xVW1oTlZsWTBWakkxUzJGc1NqWlNiR1JYWWxob2FGWnJXbGRqTVdSeldrZHdVMkpyU2twV2JHUXdUa1phY2sxVldtaE5NMEpYVkZaYVlXTnNiRFpUYTNSWFlsWktSMVpYZUU5aFYwVjNZMGhvVjFKc1NrTlVWbVJPWlVkT1JsZHNWbWxXUmxwMlZrWmFhMkV3TlZkV1dHaFdZa2RTVmxsWWNFZGxiRlp6WVVoT1YxWlVSbGhWTWpGSFZsWmFWMVpZYUZkaVJuQk1Xa1ZrVDFJeFJuTlViRTVYVjBWSk1GWnRjRXRPUmxWNFZtNVNWbGRIVWs5V2JYaGhWakZhY2xkcmRHaFNiWGg2VmpKNGExUnJNVmhWYkd4YVRVZE5NVmxXV2t0a1ZrWnpWMnh3YUUxc1NqSldhMUpIVXpGS2RGUnJiRk5pUjFKUFZGYzFiMVpXV2tkV2JYUlRUVlUxU1ZVeWRITmhiRXBWVW14b1ZtRXhjR2hhUlZwaFl6RldjbFJzWkU1V2JGa3dWbXBKTVZNeFdYbFRhMXBQVm01Q1ZsWnRlSGROTVZaVlVtMUdXRkl4V2tkVU1WcDNZVVV4Y1dGNlFsZGhNbEYzVjFaYVlXUkdUbkphUjNCVFZqRktXVlp0Y0U5aGF6RlhWbXhvYkZKWVVsUlphMXBoWld4YVNHUkVRbFZpUm5CSFZqSTFTMVp0Vm5KWGJFSmFUVzVvTWxwRVNrOVNiSEJIVVd4a1RtSnRhRk5XYlRFd1Ztc3hXRlJ1VGxaaWJFcHhWVEJXZDFReGJGbGpSbVJUWWtad2VsbFZZelZYUjBwWFYycENXR0V4U2xCV01GcGhVbTFPUjFwR1ZsZFdiRmt3VmxkNFlWTXhXbGRTYms1U1lrVTFUMVl3Vmt0T2JGcHlWMnhrYUUxVk5YbFViRlpyWVd4S2RHRkdhRmRoTVhCb1YxWmFZV05zWkhKYVJUbFhZbFpLVjFaWE1ERmtNa1pHVFZoT1ZHRXllR0ZXYkdSdlVrWnNXRTFXWkZkV2ExcGFWVEo0YjFVeFNsZGpSa1pYVm5wRk1GWnFTazVsUm5CSlUyeG9hVkp1UW5kV1YzUnJUa1prVjFkc1pGaGlWVnBWVkZaYWQxTkdaSEpWYkdSYVZtdHdlbFV5ZUZOV01rcFpWV3BPVjAxR2NGaFpla1pyWTIxU1NGSnRiRk5XYmtKWlZtMTRhMDFHV1hoWGJsSlRZa2RvVjFsc2FGTlhWbFowWTNwR1VrMVdSalJXYlRWUFZURktjMWR1YUZaV2VrWjJWbFJCZUdSV2NEWlRiR1JUVm01Q1ZGWkdXbUZrTWsxNFYyeHNZVkp0VW5CVmJGSlhWMVprVjFWclpGcFdiSEJJVjJ0V1YxVXlTbFpYYkU1YVlURndhRnBYZUdGVFJURldaRVpTVGxKRldsaFdSM2hYWVRGWmVGZFljR2hTTW1oWFdXeG9iMWRHYkRaUlZGWlhZa1UxZWxaSGVFOVdNa1Y2VVd4YVYxWkZjRE5WYlRGU1pEQTFTVnBIYkZOV00yaFFWbGR3UzFVeVVrZFhiRlpTWVROU2NsUldaRk5OUm14eVdYcFdhRkl3Y0ZkWmExSmhWakpLVlZac2FGcFdSVnBIV2xaYWQxTldUbk5oUms1VFYwVktUVlpyWkRSV2JWRjVWbXhrVjJKR1dsVlphMVpMVjBaV2RFMVVRazVOVm5CSldsVmFUMVV3TVhKWGJteFZUVlphV0ZaWE1VdFhWa1owWVVaa2FFMVlRa2xXUmxKSFZURlplRlp1VGxSaGVteFVXVzEwU21ReFduUmxSemxvVFZkU01GVnROVk5oUms1R1RsWnNXbUV4Y0V4YVYzaHpWbXhhVlZKc1RsZGhlbFYzVjFSQ1YwNUdXbkpOVlZwWFltMTRWMVJXV21GV1JsWllUVlU1VTJKVmNFZFphMXBUWVZaa1NHRkliRmRXUlVwb1YxWlZNVll5U2tsVmJXeFRWbGhDZGxaR1dtdGhNRFZYVmxob1ZtSkhVbFpaV0hCSFpXeFdjMkZJVGxkV1ZFWllWVEl4UjFaV1dsZFdXR2hYWWtad1RGcEZaRTlTTVVaelZHeE9WMWRGU1RCV2JYQkxUa1pWZUZadVVsWlhSMUpQVm0xNFlWWXhXbkpYYTNSb1VtMTRlbFl5ZUd0VWF6RllWV3hzV2sxSFRURlpWbHBMWkZaR2MxZHNjR2hOYkVveVZtdFNSMU14U25SVWEyeFRZa1phVDFSWE5XOVNWbVJWVVcxR2EwMXJOVWhaYWs1ellURktkR1ZJVGxwaVIyaDJXa2Q0WVZKV1NuTlViR2hwVm14d1dGWkhlRk5aVjBaWFUxaHNiRkl3V21oV2JuQkdaREZTZEdWR1RsZGlSbG93V2tWa2IxUnNXWHBWVkVaWFlXdGFWRlpxUmxOak1VNXlWMnhrVjFKV2NGZFhWbEpIVXpGS1IySklTbGRXUlZwUVdXdFdZVTFHYTNkWGEwNVhUVlZzTmxsVmFHdFdNVWw2WVVoS1YySllUWGhWYlRGTFVteGFjazVXVGxOTk1taE5WbXhhVTFNeFZYaFhiR1JYWWtkU1dGbHNWbUZXUm14eVdrZDBUazFXU2xoV01uUlBWbXN4Vm1OR2FGZGlWRlpZVm10YVlWZEdjRFpSYkZaT1VteHdObFpYZEdGV01sSkhXa2hPVW1KSFVrOVZiWGhYVGtaYWNsa3phR3ROVlRWNVZGVm9hMVZHV25SaFJsWmFZa2RvUkZaV1dtRmpiRnBaWVVVMVRsWnJjRFJXVkVvMFZESkdTRk5yYkZKaWJXaGhWbXRWTVdOc1draGxSMFpVVWpBeE5sZHJXbGRXTVZsNFUyeG9WMUpzU2tOYVZWcFBVakZXYzFac1pHbFNWWEJaVmtaV2EwMUZOVWRYV0d4c1VtczFjRmxyWXpWT1JsWllaVVprVldKRmJEVldWM1EwVmxaYVYyTkhhRmRoTVhCb1ZqQmtUMDVzV25OWGF6VlhUV3hHTmxaclVrZFpWa2w0Vmxob1dHSkdXbGRaYlhoaFZsWlNWMVpVUmxOU2JrSllWakkxYTFkR1duTlhibWhXWWxSR00xbFdXbUZTTVU1MVZteGFUbUpzU21oV1IzUldUVlpaZVZOclpGZGlWMmh6V1ZST1ExVkdaRmRaTTJoVllYcEdXRmRyV205VWJGcFZWbXhDVjJKR1NrZFVWM2hYVmpGV2NrOVdjRmRoTW5kNlZrZDRiMVV4V2xaTlZtUlVZVEExYUZac1dsWk5WbHB6VjJ4a1dGWnVRa2xWYlhoclZUQXhSVlZxV2xkaGExcDJXa1JLVDJOck5WZGFSMnhVVWxad1dWZFhlRzlpTVZaWFZtNUthRkpVYkhCWmEyUXdUbFpTVjFkdGRGVmlSV3cwVlRKNGQxWnJNWEZXYkdoV1RXNW9SMXBXV2xkamJWSkhXa1prVjJKWVRqTldhMXBYVm0xV1IxTnNaRmRpUjJoUVZtMTBTMk14V25OV2JrcE9WbXhXTkZadE1UQlhiRnBWVW14c1ZrMXFWbFJXYkdSSFkyeE9kRTlXWkdsaWEwbzJWa1phWVZReFduTmFSbFpYWWxkNGNGVXdWa3RaVmxweldUTm9XbFl3V2xoV01XaHJWMGRLY2xkc2JGWmhNVm96VlRCYWMxWldTblZhUmxKWFlYcFZkMWRzVm10a01WSnlUVlZXVTJGcmNGZGFWM1JoVlVaV1ZWRlVRbXROYTNCSFZsZDRZV0ZXV25WUmJFcFhZbGhDUkZadGMzaFdNVloxVlcxd1UxZEZTbEJXUmxaVFl6RmtWMVpZYkU1WFIxSlhWVzE0ZDFJeFVsZFZhemxYVmpCYWVWa3dXbE5YYkZsNllVUk9XazFYVWtkYVYzaDNVbXMxVjFwR1RrNU5SRkkyVm0xMFlWWXlSWGhYYmtwT1UwZFNUMVpzWkc5V2JGcHlWMjFHVmxac2NIaFZWelZMWWtaS2RGVnVjRmRXZWtGNFYxWlZlRlpzVG5OV2JGcFhZbFpHTTFkV1VrZFRiVlpZVW10c1lWSnVRazlVVnpWU1pXeFZlbU5GWkdsaVZscFlXVEJXYjJKR1NYcFZiRkphVm5wRk1GcFZXbXRYUjA1R1kwVTFWMDFJUWxwV1Z6RTBZakZrY2sxWVJtbFNWRVpZV1ZSS2IxVkdiSFJsUlRscVlrZFNWbFp0TVc5aFIxWjBaVVZrVjAxcVZqTlZha1pUWXpGa1dXRkdaRmhUUlVwWFZtMXdUMUV4VmtkaVJtaHNVMGRTVkZadE5VSk5iRlowWTNwR2FGSXdjRmhWTWpWelZqQXhXRlZxVGxkaVdFNDBWbTF6TlZZeFduUlNiWGhwVW01Q1VWWXllR3ROUmtsM1RsWmtWbUpIYUU5V2JYTXhZMFphZEU1VlRsUldiSEJaVkZWb2IxWlZNWE5YYkdSV1lrWktXRlpyV21GWFIwWkhVV3hXVjFZeFNsRlhhMXBoVmpKU1YxcElVbWxTYXpWeldXeG9VazFzV25GVGFsSnBUVlUxTUZVeGFHOVdNa1Y0WTBjNVZtSllVbWhXTW5oVFZteFdkVlJzWkZkaGVrVXdWbXhqTVdReGJGWk5XRXBZWWtkNFdGUldaRTVOVm14WVl6TmtiRkp0VWpGVlYzaDNZa2RHTmxac1ZsaGlSbkJZVkZWYVMxSXhXblZWYkdocFUwVktlbGRYZUd0VWJWRjRWMnRvYkZKck5WUlVWM1IzVWpGU2MxVnRSbGRTYlZKS1ZWY3hSMVpXV1hwaFJXUlZWbFp3VkZsNlJsZGpiVTVHVGxVMVdGSlZjRXRXYkZKSFZURkplRlZZYUZoaE1taHhXbGQwUzFac1VsZFhhM1JWVFZoQ1JsVldhRzloYkZweVRsUkNZVkpYVWtoWlZscGhZMjFPU1dKR1pFNWhhMWw2VjFaamVGUnRVWGxUYTFwWFlrVndXVlZzVWxkVVJscFlaRVphYkZJeFJqUldiWFJyVm14a1NGVnVRbHBpUm5CSVZHeGFjMk50UmtkYVJsSk9Za1p3V2xkclZtcE5WbXhYV2tWb2JGSlZOV0ZXYTFaaFpGWndWMWR0ZEZkV2F6VjVWREZhYTFVd01IZE9SRVpYWVRGS1NGWlVTazlqYXpGWlZHMXNVMkpHY0ZkWFYzaHZZakZzVjJOR2FHeFRSWEJ6Vm0xNFMyVnNaSEpXYlVacFVqQlpNbGxyVm1GV2JVcElZVWhLVjFKRldreFZha3BMVWxaV2MyRkdaRTVOUlhBMVZqRmFWMWxYVFhkT1dFNVdZa2Q0YUZWcVFtRlhSbFowWlVaa1QxWnNWalJXYlhoTFlUQXhXRTlVVWxwTlJuQjZXVlZhVDFOR1ZuVlJiRnBwWW10S05sZFVTalJoTWsxNFZXNVNUMVl5YUU5WmExWjNVMnhrVjFadE9WSk5hMW93Vm0xNFYxVnNaRVpqUm14V1lURmFTMVJWV2xabFYxWkhWRzF3YVZKdVFqVldhMlEwV1ZkR1JrMVdaR3BTVmtwWVZtdFZNV1ZzVWxWU2JscHJUV3MxUjFkcldrTlZNVXB6WTBkb1YySllVbkphVnpGWFZqRldjMkZIY0ZOTk1FcFJWbTB3ZUU1Rk1VZFhhMlJXWWtkU1ZsbHNXbUZsVmxaellVaGtXRkl3VmpWV1YzaERWMjFLUjFaVVJsZGlSbkJJVmpGa1IxSXhSbk5hUms1b1RWZDNNbFp0Y0V0T1JsVjVVbTVTVmxkSGFIQlZhMXAzWWpGd1dHVkhSbHBXYlhoWldsVmtSMkZyTVZkU2FrNVhVbnBXVEZaRVFYaFRSMVpHWWtaa1RtRnNXbTlYVm1ONFV6RlplRnBJVWxCV2JXaFlWV3hvUTAxV1dYbGpSVTVPVW10d1NGWnROVk5YUjBwV1YyMDVXbUV5VVhkVWExcGhVbFpLYzFSc2FHaGxiRnBZVmtSR1lWWXhaRWhUYkdob1VsUnNWbFpxVG05aFJtdDRWMnhPYTFJd05VaFpNRlV4VmpKS1dXRkdaRmRoTVhCVVZsUkdVMk14WkhKWGJFNVlVakZLVjFkWGVHOVJNVTVIWWtaa1YxWkZTbk5XYlhSM1RVWnJkMVpVUm1sU01GWXpXVEJvZDFZeFNYcGhSbEpYVFc1b01scFZaRXRTTWtwSFZteGtUbUpGY0U1V2JHTjRaREpLY2sxVlpGWmlSMmhQVm14a1UyTkdWbk5WYTJSc1VtMVNlRlpITld0WFIwcEhZMFZrVjJKSGFETldiR1JMVTBaV2NtRkdjR2xTYkZZMFZsZDRZVll5VWtoU2ExcFFWbXMxVkZsc2FHcGxWbHB4VTFoa2JGSnJjSGxVYkZaaFZERmtSMU5zV2xkaE1WcE1WbFZhZDFkSFVrWmtSMnhPVm10d05sWnNaREJUTVZKMFUydHNVbUV4Y0ZaV2JGVXdaREZXTmxKcmRHcFdNSEJLVmxkNFYxWXdNSGRUYkZKWFVqTlNWMXBWV2t0V01YQkpWVzFvVTAxR2NGVldSbFpyVFVVMVIxZHJaRmhpUlRWeFZGZDBkMU5HYTNkaFJrNVhWbXh3UjFZeWVFTlhiRmw2VkdwT1lWWXphSEphUlZWNFZqRmtjazVWTlZOU1ZsWTFWakZhVTFReVVYaGlSbWhVWWtkU1ZGbFhlRXRXYkZKWFdrWk9WRTFZUWxsWmVrNXZWakZKZDFacVZsaGhNbEV3V1d0YVlWWnRUa1ZVYkdST1lXdGFObGRYY0V0VmJWWlhWVzVXVm1KSFVuQldhMXBoV1ZaYVIxcElaRk5OYTJ3MFdUQldZVmxXU2xWaVNFSlZWbGRvVkZWc1dsWmxSMFpJVW14V1UyRXpRWGhXYTJSM1ZERmFWMU51VGxSaWJrSmhWbXhhV2sxR1dYZFhiWFJyVW14YWVsbFZaRFJoUlRGSFlrUk9WMkV4U2toWlZFWkxaRVpXY2xwSGNGUlNWRlpRVm0xd1EyUXhVbk5YYmtwb1VsVTFiMVJXVlhoT1JteFdZVWhrVldKR2JEUlpNRnBYVjJ4YVdGVnJlRmRTTTJoSVZHMTRSMVpXU25OaFJtUm9aV3RWZDFZeFpEUlpWMGw0VjFoc1ZWZElRbWhWYkZKSFYwWldjVlJ0T1d0aVJuQkhWakl4TUZkc1duVlJhMlJoVWxad1ZGWlZXbXRTYkU1eVpFWndWMkpYYUhsWFZ6RTBWREpPYzFwR1ZsZGlWM2hZVm10V1lVNUdXbk5YYkU1V1RWWktlbFV5ZEd0aGJFbzJZa1pzV2xaRmNGUlZla1pUVmpGYVdXRkdaRmROU0VKS1YyeFdhMUl5UmxkWGJGWlNZV3hLV0ZWdWNFZE5NVnBJWXpOa2JGSXdOVXBXVjNoclZqRktWVlpzUWxoaVIwNDBWRlZWTVdNeGNFbFZhelZYWVROQ2VsWlhlRk5qTVdSWFZsaG9hRk5IVWxaWmExcFhUbFp3Um1GSGRGZFNiSEJaV1ZWU1lWZEhSbkpUYWs1V1lXdEZNVll3WkZOU2F6bFhWR3hPVGxKRlNUQldiWEJIVlRGTmVGTnVVbFpYUjFKUVZqQldZVll4V25KV2JVWm9VbXh3ZUZWdGRHdFVNVXAwVld4b1YxWXpVa3hXUkVaaFZsWktjbGRzY0ZkV01Vb3lWbXRqZUZJeVRuTmFTRlpWWWtaYWNGbHRkRXRsVm1SWFdraHdUMVp0VWtoV2JYaHpZV3hLVldKR1VsWmhhMXBNV2tSR1dtVkdaSEpQVmtwb1pXMTRXRmRYZEZkak1WcDBVMjVTYkZKNmJGaFpiVFZEVWtad1NHVkZPV3BpUjFKV1ZtMHhjMVl4V2taWGFsSlhZa1p3VkZaVVJsTmpNVTV5V2tkd1UyVnRlRnBYVmxKTFZURk5lRlZzWkZkWFIyaFlWbXBDZDFOV2NGWmFSV1JvVm14d1ZsVlhjRk5XTVVvMlVtcE9WMUl6VGpOYVZXUlBVMVpXYzFwR1pGTldSbHBSVmpKNGFtVkZNVVpPV0U1aFUwWktUMVp0ZEhkak1WWnpWVzVPV0Zac1ZqUlpWV2hyVmxkS1IxWnFWbHBOTTBKUVZtdGFZVmRIUmtabFJuQm9UV3hLVlZaVVJtRlpWMUpZVTJ0b2FWSXlhRmhXYkdRelpXeFplRlZyY0d4U01ERTFWbGQwWVdFeFNsaGxSbHBhVmpOU2FGZFdXbk5rUjA0MlVXMTBUbFl6VVRGWFYzUnFUVmRHUmsxV2FHRlNSbHBZVm0xNFMxSkdXa1ZUYkdSclVqRmFTbFZ0ZUc5V01rcEdZMFZTVjFKdFVqWlVWbHBMVmpGa2RWVnRlRk5OUm5CVlZsZDRZV1F5VW5OWGEyUlhZa1UxY1Zsc1drZE5NVkY0Vm0wNVZrMVhVa2xhVlZVMVZqSkdjbGRzWkdGV00yaFVXVEZhVDJOck5WWlBWbVJwWVRCd1NGWnRkR0ZWTVVWNFZWaGtUbGRGY0hGVmJuQnpWbXhXYzFaVVJsTlNia0paVkZaYVQxWkdXbkpPVkVaYVlUSlNNMVpVU2xka1IxSTJVMnhhYkdFd2NGRldiRkpIWkRKTmVWUnJXbGRpUm5CWVZXeFNWMVZzV25SalJVcE9WakJzTkZaWGVHRldiVXBKVVdzNVZtSkdTbGhXTVZwaFpFVXhWVkZzVm1sU2JYZDZWbTB4ZDFReFdsWk5WbVJVWVRBMVZsbFVSbmRsYkZwelYyczVXRll3V2tsVmJYaHJWVEF4UlZKVVNsZGhhMXAyV2tSS1RtVldTbGxhUlRWWFVtNUNXRlp0ZEZaTlZteFhZa2hPVjJKSFVuTlphMVV4VmpGYVNHUklaRnBXVkVaSldsVm9hMWRzV2taT1ZWSlhVbFp3YUZVeFdsTmtSVFZZVW0xc1UxWkdXa1pXYTFKSFZqSk5lRlJzV2s1V1YyaG9WV3BDWVZkR1VsVlRiVFZPWWtac05WcFZWVFZWYXpGRlZXcE9XbUV4V2xSV2JURkxWakpPUjFGc1dtaE5WbkExVjJ4YVlWVXhXbk5XYmxKUFZqTm9XRlpyV21GU01WcFlaVVpPVWsxV1draFdNblJ2Vm0xS2MxTnNiRnBXUlZwTVZrUkdkMUpXUmxsaFIzQlhZbFpLVjFaWE1YcE9WMHBJVTJ4b2FGTkhVbGhVVm1SVFRURnNWVk5yWkdwaGVteFhXVlZhVjJGV1pFWlRiRXBYVmpOQ1NGVnRNVmRqTVZaWldrZEdVMkpJUW05V1JscFhVekZhVjFac1pHRlNSVXB2VkZaV2MwNVdiRlpoUjNSWVlYcENOVnBGVWs5V1IxWnlWMjVXWVZac2NETlZNR1JYVTBkU1IxUnRhR2xYUjFFeFZtcEdiMlF4U25KT1ZscE9WMFUxY0ZWdE1UUldWbHAxWTBoT1ZWSnNTbGxaTUZacllWVXhXRlZzY0ZwaE1sSXpXVmR6ZUZOSFZrWldiR1JYWld0YWIxWnFTWGhXTWxKSFlrUmFVbUpHV25CVmJYUjNVMVprV0dSR1drNVdWRlo2VmtkNGMyRnNTblZSYXpsYVlURmFWMXBFUm1GVFIxWkhWR3hTYUdWclNUQlhWRUpYWWpGYVIxZHJXbGhpUlVwWVdWUktVMDVzVWxaWGJFcHNVbXhhZVZSc1pEQlViRXBHVjJwU1YxWkZiRFJVVlZwelYwWk9jMXBHVW1saE0wSmFWMWQ0YjFFeVRsZGhNMlJYVmtaYVVGWnRkR0ZYVm5CR1YyNU9WV0pWY0VoV01WSkhWakZLYzJOSVNsZFNSWEJJVldwS1QxTldTbk5oUm1oVFRXMW9kbFp0TVRCaE1ERkdUbFZrWVZKc1dsVlpWRVozWXpGYWRFMVVVazVTYkd3MFZsZDRUMVpYU2tkalJXeFlZVEZLVkZac1ZYaFNNVTUxWWtkR1YxWnNXVEJXYlhoaFdWWmFWMWR1VGxKaVJUVlBWbXhvUTAxc1duSlhiVGxyVFZaS2VWUlZhR3RoVmtwWFYyczVWbUZyY0ZSWk1WcFRWbFpLY21SRk9WZGlXRkY2VmpGb2QxWXlTa2hTV0hCV1lURmFXRlp1Y0VkaFJscFdWMnh3YTAxV2NGWlZiWGhYWVZaa1JsTnJlRmRTYkVwRFZHeGFhMUl4VW5WVmJYQlRZVEJ3V1ZaWGVGTlNiVlp6VjJ0b2FsSllVbGRVVjNSaFpXeHJkMkZGWkdoU1ZFSTFWbGR6TlZZeVJYbFZhbHBoVWtWYVZGWnRlSGRTTVdSeVRsVTFVMUpXY0V0V2JYUmhWVEZaZUZaclpGaFhSMUp2VkZSS2IxZFdiSEpYYTNSclZtMTNNbFZYTlU5Vk1VcHpWMnBDVjAxdVRURldWRVpMVjBkU1JWWnNaRk5pUm5CVlYxY3dlRll4V25KT1ZscFhZa1UxV0ZWc1ZuZFZiRnAwWkVkMFZrMXNTa2hYYTJoTFZtMUdObFp1U2xWV1ZrcElXbFZhV21WR1ZuSmFSbFpPWWtadmQxZFdWbTlSTVdSSFYxaHdVbUpyY0dGV2FrNU9UVlpWZDFkc1RtdFNNRFZJVlZkNFQxUnNXbGRYVkVwWFlURktSRmxVUm1Ga1JsSnlWMnhDVjFKc2NGUlhWekV3VXpKR1IySkdaR0ZTTTFKeFdXdGtVMUpzVlhsbFIwWnBVbXh3VmxWdGVITldNVW8yVW01YVdGWnRVa2haZWtwTFVsWldjMkZIYkZOaE0wRXhWako0VjFsWFRuUldiR1JVWWtkNGNGVnROVU5qUmxwMFRWaHdhMDFXY0VoV01uaFBZVmRLVjFkclpGVk5WbHBZV1ZWVmQyVlhSa1pQVm1Sb1RWaENXRlpHV21GVmJWRjRZMFZrVldKWGFGUldhMVpXWlZaYWNsZHNUbFZOVmtwSVZteG9hMVpHV2taT1ZsWlhZa1pWZUZacldtdGtSMVpKV2taT1YyRjZWbUZYVmxaV1RWZEdWMWRzWkZkaGJFcFlWRmMxVTFaR2JIRlRhM1JUWVhwR1YxWnRNWE5WTURCNFUyeENWMkpZUWtoYVJFcEtaVVpXYzJGSGNGTldia0o2Vm0xNFUyTXhXbk5XYmxKT1UwZG9WbGxyV25OT1JteFZWRzA1V0ZKc2JEWlZWM1JQV1ZaWmVsUllhRlZpV0doNlZHMTRWMk5yTlZkYVJUVlhZa2hCZUZadGVGZFpWbEY0VWxoa1RsWlhhRlpaYlhoTFkwWlZkMWRyZEZWV2JGWXpWbXhTUTJKR1NuUlZiR3hWWWtaVk1WWkhlRXBrTURWWldrWm9hR0V5T1ROV2FrWnJWakpTU0ZacmFGQldiRnBQVm0xMGQyRkdaSE5YYkZwT1ZsUldNRlV5ZEc5aFZrcDFVVzVPV21KSGFGTlVWM2hoVWpGYWMxUnRhRTVoTVZrd1YxWlNUMk14WkVkWGEyUllZWHBzVjFsVVJtRldNVkpYVjJ4T2FtSkdXbmxXUnpGelZURmFSMVpZYkZkV2JVNDBXa1JHVjFJeFpISmhSM2hVVWxWd1YxZFhkR3RWTVZsNFZXNUtWMkZzU2xSVmJYUmhWMVpSZUZacVFsWk5hMW93V2xWb2QxWXhTblJWYWs1V1lXdHdTRmw2U2t0U01rWkhZVVprVTFkRlNsRldiVEYzVWpGYWNrMVdaRlppUjFKb1ZXeFNjMkl4Vm5OVmEyUk9VbXhXTlZSVmFHOVdiRXB5WTBWa1YySkdTa1JXYkZwaFl6Rk9kVlpzVm1sU2JGa3dWbTE0WVZNeFdsZFRiazVTWWtkU1ZGUlhNVzlPVmxweFVtMUdWazFXU2pCV2JUVkxWREZhUjFkdVNsWk5SMmhFV1RKNFZtUXhXblZhUjNocFVqRktObFl4YUhkUk1rWldUVlZzVW1FeWFGWlVWVnBMVWtaYVNFMVZaR3BOYTNCR1ZrZDRWMVJzU25KalJYaFhVbXhhVjFwVldtRldNVnB6Vm14a2FHVnRlRkJYVjNSdlVUSldWMWRyWkdoVFIxSlRXV3hhWVZZeFVuTmhSV1JYVFZad1IxUnNXa2RXYlVaeVUycE9XazFHY0ZSWk1WcFBZMnMxVms5V1RtbFhSa1Y0Vm0xMFlWVXhWWGhpUm1SVVlUSm9WbFpyVmt0WFZteHlWbFJHYkZadGRETldiWEJEVmpGSmQxZFVTbGhoTVZvelZtdGFTMWRXUm5WalJtaG9UVlp3TWxadGNFdFdNV1JIVkc1V1VtSkZjRzlaVkVKM1pVWmtXR1ZIZEU5U1ZFWklWa1pvYTJGR1NsVmlSVGxYWWxSRk1GUldXbUZUUjA1R1ZHMW9hVlpXY0ZwV01uUnZVekZrUjFOcldtcFNhelZvVm0xNFYwNUdXbk5YYXpsclVqQmFSMVF4V210VWJGcFhWbXBPVjJGcmJ6QldWRVpIWTJzMVYxcEhjRk5XYkhCVlYxZDRVMUl4YkZkWGJrcFhZbXMxVUZWdGVFdFhWbXQzWVVWMGFWSnJjREZWVnpWdlZtMUtWVkZxVWxkU1JWcGhXa1JLUzFKV1VuTldiR2hVVWxWd05GWnJXbE5SYXpWWFUyeGtWR0pzU25OVmJGSkhWVEZTVmxac2NHeGlSbkJIVm0xek5WVnJNWE5YYWtKWFZqTlNlbFpyWkV0a1JsWjFVV3hXVjFKVldUQlhhMlEwVkRKT2MxcEdWbGRpVjJoUFZXdFdZVTVHV2xobFJ6bHFUVmRTZWxZeWRHdFhSMHB5WTBaYVZWWlhVbFJXYWtaM1VsWkdWVlpzYUZOaVJuQmhWMVpXYTFJeVJsZFhiR1JZVmtWYVdGVnRlSGRXUmxWNVkzcEdWMkY2UmxoWlZWcHZWMFpKZVdGSE9WaFdiVkV3VjFaa1QxSXhWbk5YYkZwb1pXeGFVRlpHVmxOV2F6RnpXa2hHVldKVWJHRldiWGhYVG14a2NsbDZSbGRTYkd3MlYyNXdRMWxXU25OWGJuQmFUVWRTUjFwWGVFZGpiVlpIV2taU1UxWkdXWGhXYWtsNFRrWlJlRkpZWkZCV2JIQndWV3hrTkZaV2JITmhSemxxWWtaV00xWXlNVWRVTVZwMFpVUkNXbUV4V2t4WlZtUkxVakZPYzFwR1dtbFhSa3BWVm1wR2ExWXlUWGhUYmtaVllrWmFiMVJWVWxkbFJscElZMFZPYWsxVk5WZFVWbFp2V1ZaSmQxZHVRbHBoTVhBeVdsVmFXbVZHVm5KUFZscE9ZWHBXU2xaVVJtOWpNVkY0VTFoc1ZtSklRbFpXYm5CSFZrWnNObEp1WkZOaVIxSldWbTB4TkdGV1RrWlRiVVpYVmtWd00xVjZSbk5XTVhCR1YyMXdVMlZyV21oV2JUQjRWRzFXUjJKSVRtRlNXRkpRVm0wd05VNXNWbGhrU0dSWFVtczFSMVJzYUZkWFJscHpZMGhLVjAxcVJrdGFWV1JQVWpKR1JrNVdhRk5OVlhBMVZteFNRMkV3TVVoVmJrNVZZbXR3YjFWdGN6RmpSbEpZWkVkR1dHSkdjRWhaVlZwUFZteFpkMk5GV2xwaE1YQllWbTB4UzFJeVRrWmxSbVJvWVRGd1RWWnRjRWRVTWxKSFdraE9ZVkl5YUU5VmJUVkRWbXhhZEdWSE9XcE5helV3VmtkMFlXRldTbGhsU0VaVlZucEdWRlpGV2xaa01XUnlaRWQwYVZJemFGbFhWbFpXVFZkRmVGTnVTbFJoYTFwWVZXNXdSazFHYkZWU2EzUnFWakJ3UmxZeWVHOWhWa2w1WVVVeFYxSnRVVEJhUkVaclZqRlNkVlZzYUdsWFJrcDNWbTE0WVdSck1WZGFSbFpWWW1zMWNGbHNWbGRPUm1SeFZHMDVWMVl3VmpSWk1GcHJWMjFGZUdORVRsWmhhMXBvVmpCa1MxTldUbkpQVlRWVFRUSm9URlpyV2xkaE1rVjRWRmhvVkdKclduQlZNRlpMVm14U1YxZHJkRmROVmtwWFZteFNWMVpHU25KT1ZFSmFZVEZWZUZaVVJrdFdiVTVKV2taa1UyVnNXWHBXYTFKTFVqRkplVlJyYkZaaVIyaHdWakJXUzJJeFpGZGFSRkpxWWxaR05GWlhOVXRXYlVwSVZXMDVWVlpXU2toV2JYaFdaVWRHU0dSR1ZrNVdia0pJVmxkNFUxSXhaRWhTV0doVVlUQTFhRlp0ZUZabFJtdDNWMnRrVjFZd2NFZFpNRnBQVkd4S2RFOUlhRmROVmtwTFdsVmFTbVF3TlZkWGJYUlRWbXR3ZGxkc1kzaFZNVTE0Vm01R1ZHRnNTbkpWYlhONFRURmtjbUZGT1dsU01IQlhWRlpTVjFZeVNsbFJhMUpYVWxad1IxcFZXazlYVm5CSFkwWmtWMDFWYnpKV01uaHJUVVUxUjFkc1drOVdiV2haV1d0YWQxUXhWblJsU0dSWFZteHdNRlJXVWtOV01ERlhWbXBTV0dGck5YWldNR1JHWkRKT1IxcEdjR2hOVmxZMFYxWmFZVlF5VGxkVGJrcFFWbXMxY0ZWdGVIZE9iRnB4VTJwQ1dsWnNjREJWTW5SWFlWWktWazVXWkZwV1JWcG9WbXRhWVZaV1JuVlhiWGhUVmtWYVMxWldaREJrTVZaeVRWWm9iRkpGU2xkVVZscGhWVVpzZEUxVlpGUlNiRXBhV1RCYVlXRlhTbGxoU0doWVZucEZkMVY2UVhoak1rVjZZMGRzVTJWc1duWldSbVEwVXpGT1YySkdXbWhTVlRWdldXeGFZVlpzVmxkaFJYUllVbXR3UjFZeWVFTldiVXBaWVVab1dtVnJXbkpaTW5ocll6RmtkR0pHVGxOTk1taGhWbTE0WVZsV2JGZFVXR2hZWVRKU2FGVnJXbUZoUmxaMFpVVjBWMUpzY0RCYVJXaHJWMFpLYzFkdWNGZE5ibEYzVjFaa1MxSnNaSE5hUm1SWFRURktXVlp0TUhoU01XUkhWbTVTYTFKc1dsUldiRkpYVWtaa1dFMVljR3hTYkhCWVZrZDRWMVpYUmpaU2JUbGFWa1ZLWVZwVldtRlNNVnB5VGxVMVUwMVdjRWhYVkVKVFZqSkdSazFZVWxaaWJFcFhWRlZrYjJOc2JIUmxSVGxxWWxWYVNGWkhNWE5VYlVWNFkwZEdWMkV4Y0haV1ZFWlhWMFpLV1ZwR2FHaGxiRnBaVmxkNFlWWnJNVmRYV0dSWVlsUldjbFJYZUdGVFJsWllaVVYwVldKRmNGaFpNRlUxVm0xV2NsZHNRbHBOYm1neVdsWmFZV05XV25OVGJHUk9UVlZ3YUZacldtdE5SMDV5VFZaa1ZtSnJOVmRaYTFaM1ZVWldkRTFVVWs1U2JGWTBXVlZrTUZaWFNrWmlSRTVhVmtVMU0xWnNXbUZTYlU1R1lVWndhVkp1UVhwWGExWmhWVEpTUmsxV1dsQldNbWh3Vld4YVdtVnNXbkphUkZKb1RWWmFNRlp0ZEdGVWJHUkdWMnhPVjJFeFdtaFdSRVpYWTJ4d1JWVnRjR2xTYTNCWVZteGtNR1F4VW5SVGEyaFdWa1ZhV1ZsVVJuZFdSbHBWVW0xR2FtSlZOVWhaVlZwaFlWWktkVkZyTVZkTmFrVXdWV3BHWVdNeFduVlRiR1JwVW01Q2RsWnRjRWRUTWs1elZsaG9WMkpGY0hKVVZtTTFUVEZyZDFadVRsZGlWWEJXV1d0ak5WWXdNVWRXYWxKVlZsWndXRlV3WkZOT2JGcHpXa1pPYUUwd1NscFdiRkpMVGtkRmVGWllhRmhpYTNCeFZXNXdSMWRHYkhOaFJrNVVVbXh3VmxWdGVHRmlSa2wzVFZSV1ZXSkdjR2hXUjNoTFl6Sk9SMVpzWkdsV1JWWXpWbTF3UjFadFZrZGlNM0JoVW1zMWIxUldXbmRXVmxwWVRWUkNhazFzU2xoWGExWnJWbTFLZFZGdGFGVldNMmd6Vm14YVYxZEZOVlpVYkhCWFRVWndXbGRXVm05aE1XUjBWbTVLVDFaclNtRlpWRXBUVmtaV2NsZHVXbXhXTVVwSldrVmFUMVJ0U2xoYU0zQlhUVlpLVUZreU1WSmtNazE2WVVkR1RrMXRhRmRYVmxKSFpERlplR0pJU2xoaWJWSlVWRlphZDFkV2NFbGpSbVJYVFVSR1YxWXllRzlXYXpGMVlVWlNWMDFIVWxoV01GcFhZMjFPUjFwSGFFNVhSVXBXVm0xNFlWbFhTblJWV0d4VFlUSlNVMWxyV25kVU1WcDBaRWRHVGxac2JETldNbk0xWVcxS1NFOVVUbHBOUjJoRVZqQmFXbVZXVm5KTlZscFhVbFZ3YjFaSE1UUmtNVXAwVW10YWExSXphRmhVVlZKWFUyeGFSVkp0T1d0TlZrcElWV3hvYjFaR1pFaFZiVVpYWWtkU1ZGcFhlSGRYUjFKRlZXeGtWMVpHV2xwV2FrbzBXVlpTYzFOdVRtcFNiRnBZV1d4U1JtUXhXbkZTYkZwc1VtMDVObGxWV205aFJURkpVV3hvV0ZZelVsZFVWbVJIVmpGU2RWSnNTbWxXUjNoWlZtMHhOR1F4VGtkV2JHaE9WakJhV0ZWdGRIZFdiR3h5VjJ4a1YwMXJWak5VYkdoTFYwZEZlRmRVUWxaaE1YQklWakJWTVZack5WZGFSazVYVFRGRmVWWnRkRmRoTWxGNFVtNVNWbUpHY0U5V2JGcExWVVpWZDFwSE9WVlNia0pZVjJ0U1EyRlhTa2xSYm14YVZsWktVRmRXVlhoVFZrWnlZMFprVjJWclJYaFhWbFpoWVRGS2NrMVdWbEppUm5CVVZGUkdTMU5XV25KWGJVWldUVlZ3ZVZReFdtdGhSa3AwWlVVNVZrMUhVblpXVjNoaFZqRldjbFJzVGs1V2EzQllWMnRXWVZVeVJrWk5XRkpXWW1zMWFGWnRlR0ZUUm10NVpVZDBVMVpyTlhsWk1GVTFWakZhUjFkc1pGZGlSbkJVVmxSR2EyUkdUbk5YYld4VFVsUldWMVp0ZUd0Vk1VMTRWV3hXVWxkSFVuTldiWFIzVFVaU1YxcEZaR2hXYkhCV1ZtMXdRMVl4U2paU2FrNVhWak5PTkZWdGN6RldNa1pIVjJ4b1UwMXRhRkZXTVZwclRVWktkRlpyWkZaaVJuQlhXVzF6TVdJeFVsWlZhMlJUWWtaV05GWlhkREJYUmtsNFYyeHNWMVl6VWpOV2FrcEdaVWRPUjFWc1pGZGlTRUl4VjJ0U1MxSXhTWGhTYms1WVlYcFdXRmxVUm5abFJscHhVVzFHVlUxVldubFVNVnBoWVZaS1YxTnNaRnBXTTFKTVdXcEdWMk5XVG5GVmF6bHBVbXR3U1Zac1dsTlNNV3hZVTJ0a1YyRnJOVmhaYkdodlZVWmFjVk5yV214U2JWSjZWbGQ0YjFVeFNsZGpSemxYVm0xUk1GWnFTazVsUmxaMVZXeFNhRTB4U2xCV1YzQkxZakZaZUZkdVVtdFNNRnBUVkZab1EyVnNXa2hrUjBaV1VteHdlbFV5ZUc5V2JGcEdZMFpTV2xaRldsTmFWekZMVW14U2MxRnNaRmROTW1oTFZqRmtNR0Z0VmtkVmEyUlVWMGQ0YzFWclduZFpWbkJZWkVoa1dGSnNTbGRXYlhCRFZURktjMWR1YUZaV2VrWjJWbFJCZUdSV2NEWlRiR1JUVm01Q1ZGWkdXbUZrTWsxNFYyeHNZVkp0VW5CVmJGSlhWMVprVjFWclpGcFdiSEJJVjJ0V1YxVXlTbFpYYkU1YVlURndhRnBYZUdGVFJURldaRVpTVGxKRldsaFdSM2hYWVRGWmVGZFljR2hTTW1oWFdXeG9iMWRHYkRaUlZGWlhZWHBzV0ZVeWVHdFdNVXBYWTBWc1YxWkZjRE5WYlRGU1pWWlNjbGR0ZEZOaVJYQlVWMVpqZUZVeFRYaFdiRlpUWVROU2NGWnRNVk5YVm10M1lVVjBWV0pHY0ZaV2JYUmhWMnhhV0ZWdWNGZE5ha1pJV1RKNFMyTldVbk5oUm1ST1RVVndORll5ZUd0T1IwMTRXa1ZrWVZOR1NrOVdiVFZEVkRGc2NscEVRazlXYkhCSldrVmFUMVp0UmpaU2JHaGFUVVphV0ZaVVJtdFRSMVpHVDFaYWFFMVlRbGxXUmxKSFZXMVdSMk5GWkZSaVdGSlBWV3RXWVU1R1duRlRXR2hVVFZVeE0xUldXbUZVTVZwWVZXeG9WMkZyTlhaWlZWcFhaRWRXUjFwSGNFNVNSM2hZVmtSR1lWTXhXWGhYYTFwWVlUSm9WMVJYTlVOU01YQkZVbTVhYkZKclducFdWM2hMVmpBd2VGTnViRmRXTTBKTVdXcEtVbVZIUlhwalIyaE9UV3hLVGxaR1dtdGhNRFZIVjJ0b2ExSXdXbGhaYkZaM1UwWnJkMVp0ZEZkTlZtdzJWMWh3UjFZeVJuSlhhMmhYWVd0YVVGbDZSbGRqTWtaSVpVWmtUbFpZUWxoV2JYaHJUa1pzVjFSWWFGaFhSMmhWV1d0a1UxWldiSE5YYm1SWFlrZDRWbFZYTVVkV1ZURlhWMjV3VjFKNlJYZFhWbHBMVmxkR05sSnNXbGROTUVvMlZsUktORk50VmxoV2EyeFdZa1pLVDFWcVJrdE9iR1J6V1ROb1ZXSldXbGhXTWpWSFZXMUZlbUZHVGxWV2JGcDZWRlJHYTFZeFduUmtSM0JPWWtad05WZHNWbUZXTVZGNFYxaG9hbEp0VWxaV2JGcDNZVVphY2xkdFJtdFNNVXBJVjJ0YVlWUnNXWGxWVkVKWFlXdHZkMVY2Um1Ga1JrNXlWMnM1VjAxdWFGWlhWbVF3V1ZaS1IxWnNhR3hTTUZwVVdXeFdZVk5XV1hsbFIzUldUV3RXTmxWWGRGTldNa1Y1VlZSQ1YxSkZXbFJXYWtaTFl6RndSMWR0YUU1WFJVcFdWbXhhVTFNeFZYbFNXR2hWVjBkb1ZsbHRkSGRoUmxKWVpVWndUbFpzV2xoWGExSkRWMFphVlZKdWJGcFhTRUpJVm14a1MxSXhUbk5VYkZab1RWaENObGRyVm1GVU1XUlhZMFZhVDFack5VOVZhazVTVFd4YWNsZHNUbFJOVld3MVZUSjRhMkZzVGtkVGJGcGFZa1pLU0ZaVlduTlhSMVpHVjIxMFRsWnJjRFpXTW5SaFV6SktSMU5zVmxOaWJXaFhWbTE0UzFOR1draGxSWFJVVWpGYVNsVXllRmRXTVZweVkwVjRWMUp0VVRCWlZFRXhWakpPUmxwR1RtbFNXRUpaVjFkMFYyUXhUWGhYV0dSV1lUSlNWMVJXV2xkT1JsWjBaVWRHVlUxV2NIcFZNbmhoVm0xS1IxZHRhRmRpV0doWVdYcEdZV014VG5SaVIyeFRUVzFvVjFac1dtRlZNazE0Vkc1T1ZXRXhjRkJWTUdSdlYxWmFkV05HWkZaU2JFcFhWMnRWTldGc1NuUlBWRlpoVWxkUmQxWlVRWGhrUjBaRlZHeG9WMUpVVmpWWGExSkRaVzFXUjJJemNHaFNiRnB2VkZab1ExZEdaRmhrUjBaclRWVnNORll5ZUc5aE1sWnpWMnhvVlZac1dtaFdNRnBXWlZkV1IxUnNhRk5OVm5CYVZteGtORk14V25OWGJrNXFVbXhLVjFSV1duZGtWbkJXVjJ4a2FrMVdTbnBWTW5oclZqRktjMk5HWkZkaVdGSllWbXBHU21WR1pITmFSbEpwVW01Q1dGWnROWGRXTVdSelYyeFdWV0pZVW5CWmExcExWakZhU0dORk9WcFdWRVo1VkZaU1lWWXhXalpXYm5CYVZucEdURmt5ZUU5alZrNXpZMFUxVG1KdFozaFdNVnBUVXpGVmVGUnJhRk5oTW5oVFdXeG9RMk14V25KV2EyUnNWbXhzTTFaWGRHdFdWVEZXWTBod1YySlVWbEJXTUdSR1pVZE9SMXBHY0doTlZYQTJWbXBDWVZZeFdYaGFTRXByVW0xU1ZGbHNXa1psUmxsNVpFZEdVMDFXV25wV01qVlBWa2RGZWxGc2JGWmhNVnBvVm10YVlWWldTbkphUm1Sb1pXeGFXVlpzWkRSV01WVjRWMnhrYWxKdFVsaFdhazV2VjBaYVdFMVZkR3BOYTFwSVZsY3hNRlJ0U2xkVGF6RllZa1p3VkZscVNsTldNVkpaWVVaV2FXRXpRbEZXUmxaclRrWk9jMVZzV21GU00xSmhWbTE0YzA1c2JGWlZiVVpZVWpCd1IxUnNWbE5YYXpGSFkwUk9XazFIVWtoVk1WcEhaRWRPUms1Vk5WTlNiRzh5Vm1wS01GWXhVWGxUYmxKVFYwZDRWMWxVU205aU1WVjNWbXQwYWxadVFsaFdWM1JMWVcxS1NGVnJXbFppV0UweFZsUktTMUl4WkhWalJtUk9ZbXhLYjFadE1IaFRNVXBZVTJ0a2FGSnNjRmhaYTJoRFZGWmFkR1JIUm1oTlJGWllXVEJXYTFadFNrWmpSVGxYWWtkb1JGWkZXbUZqTVZwMFVteGFUbGRGU2paV1ZFa3hVekpHVjFOc1ZsTmlSa3BZV1d0YVMxZEdWbFZTYlVaVFRWWndlbFl5TVhOaFZrbDVZVVphV0Zac1NsQlZWRVpQWXpGU2NtSkdWbWxXUmxwV1YxWlNSMk5yTVZkaVJtUlhWa1phV0ZadGVIZFdiRlpZWlVWT1ZrMUVSa3BWVnpWclZqRktjMWRzVWxaV1JYQklWbTF6TVZaV1pITldiV3hYVFcxb2RsWXhaRFJaVjFGNVZHeGtZVk5HU25GVmJUVkRWREZXYzFWc1pGTmlSbkF3VkZaU1ExWlhTa2RqUldSYVlURktVRlpzWkV0U01VNXlWR3hXYVZKdVFYcFdWM2hoVWpGa1dGTnJXbEJXTW5oVlZXeFNWbVZHV25SbFJrNVNUVlpHTkZac2FHOVdWMHBJVld4T1dtRXhjR2hXTW5oVFZteGtkVnBHVWs1V2JrSklWbTB4TkdFeFdsWk5WbHBZWWtkU1ZsWnRlR0ZoUmxZMlVWaG9WMVpyV2pCVWJGcGhWVEpHTmxaclZsaGlSMDQwVmxSR2ExSXhVblZXYlhCVFRURktWbFpYZUd0T1JURnpWbGhzYTFKNmJGZFVWM1J6VGxaV2RHVklUbGRXYlZKSVZUSjRTMWR0UlhoVGJuQlhZa1p3V0ZsNlJtdGpiVkpIV2tVMVYxZEZTbHBXYkZKS1pVWnNWMWRZYkZOWFIxSlpXV3RhUzFkR1duSldiVVpQWWtkNE1GcFZXbUZoTURGWFUyNXdWMUl6YUZSV2FrcEdaREpPUjFwR1pFNVNhM0JGVmpGYVlWUXlUWGhXYmtwWVlrZFNiMXBYTVRSV1JscDBaVVpPVTAxVmJEUldSelZIVlRGa1NGVnVSbFZXVjFFd1ZXMTRWMVl5UmtaUFZsSnBVbFJXU0ZaSGRHOWhNV1J5VFZoR1YyRXphR2hWYTFaM1V6RndXR1ZHVGxoU1ZHeFhXa1ZhVTFVeVJYcFJXR3hYVFZad2FGbHFSbE5rUmxaeVdrWkthV0Y2VmxKV2JURTBVekZhUjFkdVVtdFRSMUpaVlcxNFlXVnNXWGxrUkVKYVZqQndTRmt3YUhOV2JVcFpZVVpDVjJKWVRqUldNVnBUWkZaYWMxcEdaRk5XV0VKU1ZtMTRVMUl4VVhoWFdHaFRZbXMxV0ZsclpEUlVNVlowVGxWT1ZWSnNjSGxXYlhoclZqQXhWMUpxVWxaaVdHaG9Wa2Q0WVZZeVRrWmxSbFpYWWtWd1JWZHNaRFJVTVZwelZXNVNhbEl6VW05VVZFSkdaVVprVjFWck9WSk5WbHBKVm0xNFlWWkdXa2RYYkZaWFlrZFNWRnBYZUhOak1WcHhVV3hTVTAxSVFrdFhWRUpyWkRGU2RGTnJaR2xTUlRWWFdsZDBTMVZHV2xWUldHaFVVbXR3ZVZsVlpITldSazVHVTJzNVYySllVbFJXYWtwTFZqRmtjMVpzU21sU01VcFlWa1phWVdReVZsZFhibEpzVWxSc1dWWnNVa2RYUm10M1ZtczVWMDFXYkRaWlZWcERWMFpaZWxWcVNtRldWbkJVV1RKNFYyTXhaSFJoUlRWcFlsZG9WVlp0TUhoTlJtUnlUbFprV0dKck5WaFpiWFIzWWpGU1dHTkdaRmhpUm5CV1ZUSndRMkV3TVZaT1ZtUmFWbGRvTTFkV1ZYaFRWa1p5WVVaV1RsWXhTalpXYkZaaFdWWkplRmRzYkdGU2JGcFBWV3BHUzFSV1pGZFhiRnBzVW10d1dGVnROVk5oVmtwVllraE9XbGRJUWxoYVIzaGFaVlV4U1dGR2NGZE5SbkEyVjFSQ2IxSXhaRWRYYTFwVVlrVktWMWxVUm5kaFJtdDVaVVpPVjAxV1dubFpNR1F3Vkd4S1IxZHNaRmRXYkhCVVZtcEdjMVl4VG5KWGJFNW9Za1p3VjFkWGVHOWlNRFZ6WWtoU2JGSnNjSEpVVmxwTFpXeGFTR1ZHVGxkTmExWXpXVEJhYTFZd01VZFRhMmhYWVd0YVYxcFZXbE5qTVZaMFVteE9UbFpZUWsxV2JHUXdWVEZGZVZOdVRtbFNSbkJXV1d0a1UySXhXbkZSV0doUFlrWndXVlJzYUU5V1ZrcHlWbXBTVmsxWGFISldNbmhoVjBaV2RXTkhSbGROTVVWM1ZtMTRWazFXWkVkYVNFNVlZWHBXVkZscmFFTldiRnAwVFVob1RsSnNiRFJXYkdodldWVXdlV0ZHYkZwV1JVb3pWbXBHYzJOc1dsVlNiV2hYWVhwV05GWlhNWHBPVmxWNFUyNU9XR0p0ZUdGWlZFWjNVMFphY1ZKcmRHcFdNSEJJVjJ0YWExWXdNSGhUYWxaWVZucEZNRmxxUm1GVFJsWlpZa2RHVTFaR1dsUldSbEpMVlRKU1YxcEdiR3BTVkd4WFZGZDRZVmRXV2toT1ZtUldZbFZ3ZWxrd2FFZFpWbHAwVlc1S1drMXVhRE5WYlhoM1UwVTVXR05HVGs1U1JrWTBWbXRhVjFRd01VZGFSbHBPVm14d1VGWnNaRk5YUmxweFZHMDVhRkpzV2pCYVZWcHJZV3N4UldKR2FGaGhNWEJNVm1wS1JtVnNSbk5YYkdSb1lYcFdObGRXVWtkWlZrbDRVMnhzYUZKc1NtOVVWRUpMVjBaYVdFMVVVbFJOYTNCWVZqSTFUMWRIUlhwVmJGWmFWa1ZyTVZScldsTldiVVpHVDFaU2FWSldXVEZXYTJSM1V6RmFTRk51VW14VFIzaGhWRlZhVmsxV1VuTlhhMlJxVmpCd1Ixa3dXazlVYlVwMFdqTmtWMWRJUWtSWlZFWlNaVlpXZFZWc1dtbFNNbWhSVm0xMFYxTXhVbGRXYkZaVFlUTlNjRlp0TVZOWFZtdDNZVVYwVldKR2NGWldiWFJoVjJ4YVdGVnVjRmROYWtaSVdUSjRTMk5XVW5OaFJtUk9UVVZ3TkZZeWVHdE9SMDE0V2tWa1lWTkdTazlXYlRWRFZERnNjbHBFUWs5V2JIQkpXa1ZhVDFadFJqWlNiR2hhVFVaYVdGWlVSbXRUUjFaR1QxWmFhRTFZUWxsV1JsSkhWVzFXUjJORlpGUmlXRkpQVld0V1lVNUdXbkZTYlRsU1RWVTFlbFV5ZEhOWlZrbzJWbXhXV2xaRmNIWldhMXB6WTFaT2NscEdhRmRpUlhCaFZteGtORkl5UmxkVGJHeFNZVEpvV0ZsclduZGhSbHB4VW1zNWFrMVdjREZWTW5ocllVVXhWMk5IUmxkU2JIQm9WMVphWVZJeFdsbGhSbWhvWld4YWVGWlhlR3RPUms1ellrUmFWR0pZVW05WmJGWjNWMFpaZUdGSGRGcFdhM0F3V1ZWV05GbFdTbk5YYm5CV1lURndNMVZxUmxkak1WSnpXa2RvVGsxRmNHRldiWGhyVGtac1YxUllhR3BUUlRWVldXMTBkMVpHYkZWVWEwNVhZa1phZWxZeU1VZFZNa3BHVGxSR1drMUhhRE5YVmxWNFl6Sk9SMVpzV2xkbGJGbzJWakZhWVdFeFNYaFViR3hvVW01Q1QxbFhkRWROTVZsNVkwVk9hMDFWYkROVU1WcHZZVlpLY2xOc2FGWmlXR2hZVkZSR1lWSldSblJrUmxKT1lURndXRlpHV2xkV01WWjBVMnhvYkZKclNtaFdhazVPWlVac2NWSnRkR3RTVkVaWlZXMHhiMkZXVGtaVGFsSlhZV3RhVkZWVVJsSmxSazV5V2tab2FXRXpRbGRXYlRFMFV6Rk5lR05GVmxKV1JWcFlWbTEwWVZac1duUk5WV1JXVFZWd1YxWXhVa2RXTVVvMlVtcE9ZVll6YURKYVZscHJZekZXYzFOdGJGZFNWbkExVm0wd01XUXhXWGxVYkdScVVsWndhRlV3VlRGamJHeHpWbTVrYTAxV1dsbFpNRll3VjBkS1IySkVXbHBXVjJoeVZqQmtSbVZXVm5KaFJsWlhWbTVCZWxadGRHRmtiVlpZVld0a2FWSXphSEJWYWs1clRteGFjbHBFVW1oTlYzaFpWVEo0WVZReFduTlhiRnBhWWtkb1JGbFZXbUZqYkhCSFZHMXdWMkpXU2xsV01uUmhVekZTY2sxVlZsTmhNbmhZVlcweGIwMHhXa2hsUm5CclRVUkdTbGxWV2xkV01EQjNVMnhDVjFKc2NHaFpla0V4WkVaS2NWZHNTbWhsYkZwWlZsZHdUMVF3TlZkWFdHaFlZbGhTV1ZsWWNGZFhSbFpZWlVjNVdGSXdjRmxaVldoRFZtc3hSMVpZYUZwbGExcFVWVzE0VTJOc1RuUmhSVFZYVFcxT05WWnRNSGRrTWxaSFZWaHNWR0pHY0hCVmExcExWMVpzYzJGRlRscFdiRXBaV1hwT2IxWkdTbk5YYkZwV1lsaE5lRlpxUVhoV2JGcHhWV3hrVGxadVFsVldiWEJMVXpGYWNrNVdXbWhTYkVwd1ZqQldTMVZXV2tkYVJFSlhZbFphU0ZkcldsZFdSMFkyWWtoQ1YySkdTbFJVYkZwWFl6SkdTVlJzVms1V1dFSkpWMVJDYWs1V1duTlRibEpXWWxkb1lWWnNaRk5VUmxWNFYyeE9hMUl4V2tkVVZscExWR3hLVjJORVZsZGhhMHBVVlhwR1NtVldUbk5hUjNCVFlsZG9XVlpxUW10T1JsWlhWbTVLWVZKVWJGQlZiWGhMVjBaa2NsWlVSbFZOVlhCV1dXdGFZVmRHV2taT1ZFNVhUVzVvYUZWdGVFdFhWMDVIWVVab1ZGSlZjRzlXTW5oclRrZFJlRmRzWkdsU1JuQlZXVmh3VjFkR1ZuRlRhelZzVW14c05GbFZhR3RoVjBwWFYyeGtWVlpzV2xoV2JYaGhVakZrYzFOc1pGZFNWWEEyVjFSQ1lWVXhTbk5WYmtwVVlsZG9UMVpxU2xKTlZscHlXVE5vYTAxWGVGbFZiVFZQVlRKR2MxTnNXbHBpUjJoRVdUSjRjMk5zV2xsaFIzUlRZa1Z2ZDFkclZsWk9WbEowVTJ0b2ExSkdTbGhWYWs1VFZrWldObE5yV214U01EVktWVzE0VDFZeFNsVldiRUpZVm0xUmQxWnRNVmRXTVZaelZteFNhVlpXY0haV1Z6QXhVVEZrVjFkc2FFNVdSVXBXVkZaYWQxTkdXblJqUjBaWFlrVndlVlJzVmpCWGJGcHpWMVJDVm1FeGNFaFdNR1JUVWpKS1NHVkhhRTVpYlU0MFZtMTBhMDVIUlhoV2JsSlhZVEZ3VUZadE1XOVhSbXh6WVVjNWFGSnRlSHBXYlRGSFlXeGFjMU5xUmxwTlJsbDNXVlZhUzFaV1duVmhSbVJwVW10d1VWWnNWbUZaVms1SVZXdFdXR0pIYUZsVk1GWkxWbFprVjFkdFJtdE5iRXBJVm0wMVUyRXhTWGRYYmtKWFlsaFNNMXBYZUZwbFJsWnlaRVpXVG1FelFrbFdWbVEwVlRGYVIxZHJaRlJoZW14WFZtdFdTMlZzY0VWU2F6bFhZbFZhU2xrd1pFZFViRTVHVTJ0MFYySkhUak5VYkdSSFVqRndSbGRyTlZkU1ZYQllWbGR3VDJGck1WZGlSbWhPVmxkU1ZWVnRlSGROUm10M1drYzVWV0pHY0VsYVNIQkxWakF4ZFdGSVNsZFNSVVkwVmpCYVUyUldWbk5hUm1Sc1lsaG9UMVp0TVRCaU1WRjVVMjVPVldKcmNGbFdhMXBoWWpGU1ZsVnJaR3hTYkhCSVZsZDBNRlpYU2xkWGJuQlhUV3BXUkZZd1pFdFdWa3B5WlVad1YwMHdOREJXVkVKaFlUSlNTRlJyWkZKaVJUVlVWbXhhV21Wc1duRlRhbEpvVFZad2VWUldhRTloVms1SFUyeG9XbUpIYUhaV1ZWcHpWMGRXUmxwRk9WZGlWa3BhVmtaYWExSXlSa1pOVm14U1lrWndXRmxzVWtkbGJHUlhXa1ZrVjJKRmNGWldiWGhUVmpGYVZWWnFSbGhXYkZwWVdrUkdTbVF3T1ZaV2JGSm9aV3hhVlZaWE1UUmtNREZIVjFoc1RsZEhVbGhaYkZwaFpXeHNWVlJ1VGxkTlZuQkhWR3hrUjFaV1dYcFZiV2hhVFc1b1ZGcEdaRTlTYkZKMFlVZG9iR0V4VmpWV2JHTjNaVWRSZUZWWWFGaGhNWEJ3Vld0YWQxWnNiSEphUms1VlRWWktlbFpzVWtkVk1WcHlZMFphVjJKWVRURlpWbHBoVmpKT1JWRnNaRk5TVm5CUlYxUktOR1J0VmtkU2JrWlhZa1Z3YjFSVlduZGlNV1JZWlVkMFQxSXhXbnBYYTJoUFYwWmFSMWR1UWxwaE1taEVWako0WVZkRk1WaFNiR2hvWld0YU5GZFhkRk5TTVd4WFUyeG9WbUpIYUdoVmJURlRWa1pWZUZkc1RsaFNWR3hYV2tWYVUxVXlSWHBSV0d4WFRWWndhRmxxUmxOa1JsWnlXa1pLYVdGNlZsSldiWGhUVWpGYVYxZHVUbGRXUlZwVVZGWmFkMU5XY0ZaV1ZGWldUV3R3U1ZkclVsTldiRmw2Vld0NFYyRnJXa3hXTUZwM1UxWndSMVZzWkZkaE1qazFWbXBLZDFFeVVYaFRXR1JRVmxaYVZWbFljRmRXUmxaMFpVaGtUbEpzYkRWVVZtaHJWakpLVjFkdWNGcFdSVFY2Vm1wR1lWSnJOVmhTYkZaWFRURktiMWRVU2pSVk1sSllWR3RhVldKWGFHOWFWM1JXWlZaYVdFMUlhR3ROVmtZMFZqSjBZV0ZXU2tkalJscGFZVEpTVkZaRVJsTmpNVnBWVW14T1YyRXpRbGRXYlRGNlRsZEdWMWRzWkdwU1JVcFlWV3RXWVZaR2NGaGxTRnBzVm10d2VsbFZXbTlXTWxaMFpVaG9WMUpzU2toVmVrRXhWakpLU1ZOdFJsTmlWa3A1Vm0xNGIxVXhTbGRYYkdoT1ZqQmFZVlp0ZEhkU01XeHlWVzFHVjFZd2NGcFZWM00xVmxaYWMyTkljR0ZTVm5CeVdrVmtTMUl5VGtobFIyaE9VMFZHTTFadGNFZGlNbEY1VTI1U1ZsZEhVbEJXYkdSdlYwWnNjMkZIT1ZaU2JYaDZWbTAxYTJGck1WaFZibkJYVmpOb00xWkhlRXRXVmtweFVXeGFUbUZyU1RCV01WcGhVMjFXUjFkc2JHaFNiV2hZV2xkMFlXRkdaRlZSYlVaU1RXczFXRlZ0ZUhOVmJVVjZVV3hXVmsxR1ZYaGFSbHBXWlZkU1IyTkZPVk5XUmxwWVZrWmFZVll4VlhsVGJHaHNVakJhVmxacVRsTmxiRkp6VjJ4S2EwMVdXbnBXTW5NeFlVZFdjMWRZWkZkV1JXd3pXbFZhVW1WR1pISmhSM2hVVW10d1dsZFhkR3RWTVZGNFZXeGtXR0p0VWxoV2JUVkRVMVpzVmxaVVJsZE5WV3cyVmtkd1QxWXhTWHBWYkZKWVZtMVNTRlp0Y3pGWFZrcHpWbXhrVTFadVFsRldiRnBUVVRGS2NrNVdaRlZpUm5CV1dXdFZNVlF4Vm5GUmJVWlVWbTE0ZVZsVmFHdFdWbHB6WTBWYVYySlVRalJYVmxwTFpFWlNXV0ZHVmxkU1dFSlJWMnRXWVZNeVVsZGpSV1JwVWxSV2NGbHNaRzVsYkZweFVteE9WRTFXYkRWV1YzaHZWbFprU0dWR2FGZGlia0o2VmtWYVYyUkhUa2xVYlhCcFVtdHdXbGRVUWxaTlZsSjBVbXBhVTFaRmNGaFpiRkpIWld4a1YxcEZkRmRpVlRWS1ZXMTRWMVl4V1hoVGJUbFlWbTFTTmxSc1drdFdNVXB6Vm14S2FWWldjRmxXUmxwaFZqQTFWMWRZYUZwTk1taFlWRmQwZDFJeFVuTmhSV1JYWWtkU1NWcFZaRWRYYlVwSFkwUk9XazF1YUhKWmVrWlhZekZ3U0dGR1pHbGhNRzk2VmpGYWIyUXlSWGhVYms1VVYwZDRjMVV3V2t0V1ZsSldXa1pPYkdKSVFsbGFWV014WWtaYWNtTkVSbHBoTWxJeldWWmFZVll5UlhwaFJscHNZVEJ3VVZac1VrZGtNazV5VDFaa1YySkZOVmxWYWtwdllVWmtXR1ZHV2s1V01EVklWbGQ0YjJGc1NqWldhemxYWWtaS1dGcFZXbHBsVlRGWlZHeHdWMDFHY0RaV2JYaFRVakZrU0ZOc1ZsTmlSMmhoVm1wT1RtVkdXWGRYYlVaWFZteEtlbGt3V210Vk1WcHpWbXBTVjJFeVVYZFdWRVpYWTJzeFdWUnRiRlJTVm5CYVZtcENiMUV4VmtkWGJrcFhZVEpTY2xSV1ZYaE9SbHBJWkVVNVZVMUVSa2xhVlZaelYyMUZlVlJxVWxkU1ZuQkhXbFZhVDJSRk1WZFdhelZYWVROQ1NWWXllRmRaVjAxNVZXdGtWbUpzU25CVmJGSlhZakZzYzFwRk9VOVNiSEJKVkZab2ExZHNXWGRYYkdoYVRVZG9TRlpxUm1GU01XUjBZVVp3YVZKdVFtOVhWRVpoVlRKTmVHTkZaRmhoZWxaUFZtcE9iMVl4V2xobFJrNVhUVlpHTkZVeWRHdFZNV1JJWlVac1YyRnJOVVJYVmxwM1YwZE9ObEpzWkZkaE1XOTNWbFJLTUUxR1VuTlRXSEJvVWxkU1YxUlhOVU5TTVhCRlVtNWFhMDFyY0VoV2JYTXhWVEF4YzFOdVpGZGlXRUpJVlcweFYxSXhVbGxhUmxacFVsUldVRlpYY0VOWlZrNVhZa2hLYUZOSFVsWldiWGgzVW14YWRHUkVRbGRpVlZZMFZUSjBhMWRyTVVkWFdHUlhZVEZ3U0ZreFduZFNiVTVIVTJzMVYxZEZTWGRXYlhSVFVqRlZlRk51VWxkaE1sSndWVEJhUzFac2JITmFSRkpWVFZkNFdWUldaSGRpUmtwelUycENXazFIVWtoWlZWcGhaRlpHZFdGR1pHbFNhM0JaVmpGYWExTXhXWGhhU0ZaVFlrWmFjRlZxUmt0WFJscEhWV3RrYWsxV2NGaFZNbmhYVmpKR05tSkdVbFppV0ZKWVZHeGFXbVZHY0VsYVJtaHBWbXh3TlZaSGVHRldNVlowVTJ4YWFsSllhRlpXYlhoaFRURldjVkp0UmxkV2EzQjZWMnRhVjFZeVNrbFJhMXBYVFc1U2NsWlVSazlqTVU1eVZteEthVlpHV2xaWFZtUXdVekZXUjFkc1dsaGlSMUp4VkZaVk1XVnNXWGxsUjBaV1RXdHdSMVl5Y0VkV01VcEdUbGh3VmxaRlJURldiVEZMVW0xR1NHSkdUbXhoTVhCUFZteGFVMUl4VG5SVldHaHBVbXh3YUZVd1ZURmpNV3hWVkcwNVYySkdTbnBXTWpGSFZqSkdObEpyYUZkTmFrSTBWbXBLUm1WR1pIVmpSbVJUVFRKb1RWWnRkR3RTYlZaWFkwVm9iRkl6YUZoV2JHaENaV3hhY1ZOWWFHcE5hM0F3Vld4b2IyRkdTa2RqUnpsVlZrVndkbFpFUm1GalZrWjFXa2R3VjJKV1NscFhWRUpYWkRGUmVGTnNWbGRpUm5CWVZGWmFTMVJHV1hsTlZYUlhUV3RXTmxsVldsZFViRmw0VTIwNVdGWXpVbWhaZWtFeFl6RmtkVlZ0ZUZOV1IzaFFWMVpTUjFkck1VZFhhMVpUWWtVMVYxbFljRWRTTVZKellVWk9WMUpzY0VkWk1GVTFXVlpaZW1GR2FGVldSVnBoV2xjeFMxTkhVa2RVYkdSb1RWaENXbFp0ZUd0TlJteFhWRmhrVGxac1dsUlpiR1EwVmxac1dHUkhSbFpTYkhCNlZqSjBhMVl3TVZaT1dIQlhZbGhSZDFaSGVHRlNiRTUxVm14a1YxWXhTalpXVmxKQ1pVWk9SMU51VG1oU1ZGWllWRlJLYjFSc1dsZFZhM1JPVWpGYVdGWkhOVXRoUmtweVRsaENWVll6VW1oV01uaGhVakpHUjFSc1dsZE5TRUpJVmtkNFlWbFdXbk5YYms1cVVsaG9XRmxyV25ka1ZuQkZVbXhrYW1KVk5VaFdSekZ2VmpBd2VGTnFSbGROYm1oMldYcEdSMlJHU2xsaFIyaFRVbTVDZGxaR1VrdGlNVkY0VjI1R1VtSnRVbkZXYlRGVFYxWnJkMVp1WkZWTlZYQldWbTE0WVZZd01WZFRhM2hYVFdwR1RGWnFTa1psYlVaSFZtczFWMDFWY0haV01XUXdXVmROZDA1WVRsaGliRXB6Vld4U2MxUXhiRlZTYkhCT1VteHdSbFZ0ZUU5V2JVWTJVbXRrVldKSGFGUldhMXBoVW0xT1JrOVhSbGROTW1oWlZrWlNSMWR0Vm5SVGEyaHJVbXh3VDFac2FFTlhWbHB5V2tSU1dsWnNjRmhWTWpWUFZUSktjMWRzYkZaaVdFMTRWVlJHVW1WR1duVlViRTVUWW10S1NWWnRNVFJXTVZsNFYxaHdhRkpyV2xoWmJHaHZZVVphU0UxVmRHcGhlbXhXVm0xNFMyRkhTbGxoUlhoWFZqTkNURlJyWkZOU01WSlpXa1pXYVZKVVZtOVhWbWgzWXpGYWMxWnVUbWhTZW14WldXeFdkMVl4VW5OaFJVNVhWbXhzTmxWWE5WZFdWbHB6Vmxob1drMVdjSEphUldSTFUwWktkR0ZIYkZOaVJsa3dWbTF3U21ReVZrZFhXR3hUWW10d1VGWnRNVzlYUmxweVZsUkdXbFpzY0hsV2JYaGhWR3hhYzFOdWJGZFdNMmhNVmtjeFMxTkhWa2xoUm1ST1ZqSm5lbFpyVWtkWlZrcHpWRzVTYVZKc1NtOVpWRUozVmxaYVYxcEVVbHBXYTNCNlZqSjRiMVF4V25SbFJtaGFZbGhOZUZSV1dtRlhSMVpIVjJzMVYyRXpRbGhYVjNCUFlqRlNjMVJyWkZSaWEzQlhXVmQwZGsxR1VsWlhiWFJxVFZaS01GUnNaSGRWTVZsNllVVmtXR0V4U2t4WlZFWlRZekZLV1ZwR1RtbGlSWEJXVjFkNGEwNUdSWGhpUmxaVFlsUnNVRmxzVmxkT2JHeFdWbFJHVjAxRVJrcFZWelZ2VmpBeFdGVnFUbFpOYmsxNFZXMXpNVll4V25OaFJtUlRWMFZLYjFZeFpEUlpWMDUwVm10a1ZsZEhhR2hWYWtKaFkwWldkRTFVVGs1aVJuQXdWRlpTVTFaVk1VVlNibXhYWWxoQ1ZGWnNWWGhXTVU1elZHeFdWMVpzVmpSWGExWmhWREZhVjFSdVNrOVdNMmh3VlcxNGMwNXNXblJqUlRscVRXdFdORlV5ZUd0Vk1rcElWV3hrV2xaRldqTldSVnBUVmpGV2NscEhhRmRoZWxZMFZsY3hlazVXV25OWGJrcFlZa2RTVmxsVVNrNWxSbGw0VjJ4YWEwMVZjREJVTVZwaFZUSkdObFpyVWxoV2VrVXdWbFJLVDJNeFpIVlViVVpUWVhwV1dWZFdVa3RPUlRGWFZtcGFVMkY2YkZOVVZWSlRUVEZzY2xac1RsZGlWWEJZV1RCYVIxWXlSWGhYYkdoVllURndjbFl3VlhoV2F6bFlZVVprVjFKV2J6Qldha2t4WkRGSmVGVlliRk5pYXpWeFZUQldTMWRXYkhOaFJVNVhUVlpLZWxZeU5XdGhNVXB6WTBSQ1drMUdWVEZXYWtGNFZqRmFjVmRzWkU1V2JrSlZWbGN4ZWsxV1duSk9WbHBYWWtad1dGVnNhRU5oUm1SWFdrUlNhazFFVm5wV1Z6VlBWbTFGZDA1WFJscFdSV3N4Vkd0YVZtVlhVa2hTYkdSb1pXdGFXVlpxU25wTlZsbDVVbGhrVDFkRmNGbFpWRVpoWld4V2MxWllhRlJTYmtKSFdrVlZNVlV5U2tsUmJXaFhZbGhvV0ZacVNrNWxSbHBaWVVaU2FWSnVRbGhXYlRWM1ZqRldWMk5HWkZkaE0wSlFWbTF6TVZZeFdraGxSVGxhVmpCWk1sbHJXbUZXYlVwSVlVaGFWMDFxUmt4V2JYTXhWMVpHYzFac1pFNU5SVzk0Vm10YVlWWnJNVmhVYkdSaFUwWktjRlZxUW1GaU1XeHlWMnhhYkZKc2JEVlVWV2h2VmpBeGNsZHViRlZpUm5CMlZtcEdZVkpyTlZoU2JHUm9UVlp3V0ZaR1dtRlZNazV6Vm01T1ZHRjZWbkJWYWs1dlRrWmFjVkp0T1d0TlZrWTBWakowWVZaSFNsaGxSbFphVmpOU1RGWnJXbGRYUjFaSVVteE9hVkp1UWxwV1IzaGhZekZaZVZOdVNrOVdSVnBZVm10V1MyRkdXbkZTYkU1cVRWVndlbFl5Y3pWVk1sWnpWMjFHVjJKVVFYaFdSRXBUVmpGa2MxWnNUbWxTVkZaVVYxZDBZVmxYVm5OWGJHUmFaV3RhV1ZadGVGZE5NVlp6Vld4a1YxSnNjRmxXVjNoVFYyeGFXRlZzVWxaTlJuQm9WakJWTlZadFVrZFZiRTVvVFRCR05WWnFSbUZaVjBsNFZXNVNWbUV5VWxOWmJYUjNWakZzVlZGdVpGaFNiRnA2VmpJeFIyRldXbk5qUmxwV1lsaG9VRlp0YzNoV2F6VlhXa1pXYVZKc2NESldhMXBoVW0xUmVGTnVWbFJpUjJoVlZUQldTMDVXWkhOV2JGcHNVbTFTU0ZaSE5WTmhiRXAxVVcwNVdsWkZjRFphUkVaaFUwZFdSMVJzYUdobGExbzJWMWQwYjFVeFpFZFhhMXBZWWtWYVdGbFhkR0ZOTVd3MlVtMTBXRll3TlVoWGEyUnpWVEZhUjFOVVJsZFdNMmgyV1dwR1YxSXhaSEphUms1WVVqRktWMWRYZUZOU01VMTRWV3hvYWsweWFGQlphMXAzVjJ4a2NsZHRPV2xTYkd3MFZUSjBhMVl4V25OalIyaFhWa1ZhVEZreU1VcGxiVVpHVGxaa1RsTkZTazVXYTFwaFZtc3hWMWR1VGxkaVIxSlpXVlJPVTFkR1duTlplbFpQVW14S1YxbFZWazlXYkVsNFYyeGtWbUpVVmt4V01GcFBVMVpHZFdKSFJsZFdiRmt3Vm1wQ1lWUXlVa2hVYTJScVVqSm9iMVJYTlU5Tk1WcHlXa1JTVmsxWFVubFVWbWhQWVZaT1IxTnNiRmRoTVZwb1ZsWmFZV05XU25WYVIzQk9WakZLWVZkVVFtRmhNa1pYVTJ4V1ZtRnNXbGRaYTJSdlpHeGFWbGR0UmxOTlZYQmFWMnRhVjJGV1drWlhhM2hYVW0xU05scFZWVEZqTVdSellrZEdVMkpYYUhwV2JYQkhVekZKZUZkc1pGaGlWVnBYVkZaV2QyVldiSEZVYlRsVllrWnNNMWt3VmpSV1ZscFlWVzVhVjJGcldtaFZha1poWTJ4d1IxWnJOVk5sYlhOM1ZtdGFZV0V4VFhoVVdHUk9WbGRTV1ZsclZrdFdNV3hWVVZSR2FtSkhVbmxXYlRWUFZURmFWVkpyYkZoaE1sSklWbFJCZUZJeVNrVlViR1JPWW0xb1VWZFhNSGhTYlZaWFZtNUthRkl5YUZWVmJGWjNaVVprYzFkc1RsSmlWVFY2Vm0wMVMxWXlSWGxWYkdoWFlsaFNNMVl3V2xKbFJtUnpWR3hrVGxaWVFqVlhWRUpYVFVaWmVGTlljRlppYTFwaFdsZDBTMlZzVm5KWGJHUnJVbTFTZWxWWGVHdFZNVnB6WVROa1YyRnJXbkZhVlZwU1pWWktjMWRyTlZoU1ZuQnZWMnhrTUZsV1ZrZGlSbWhzVTBkU2NWVnRNVk5OUm10M1YyMUdWVTFXY0RGVlYzQkRWakpLVlZKcVRsZFNSVnBoV2xWYVlWZFhUa2RoUm1ScFVsaENTVlpyWkRSV2F6RlhVMnhrVjJKR1dsVlphMmhEWWpGc2NscEVUazVpUm5CSldsVmFUMVZyTVZobFNHeGFZV3MxY2xadE1VWmtNazVIWVVaYWFWSnVRbGxYYTFwaFlURkplRnBJVm1wU01uaHdWV3hvUTFkR1draGxSbVJYVFZVeE0xUldXbGRWYlVwMFZXeGFWVlpGYnpCVmExcFNaVVphZFZSc1VsTk5TRUpLVmtaYVYwNUdWbkpOVmxwcFVrVTFXVlp0ZUdGamJHdzJVMnhrYW1KV1draFdiWE0xVmpKS1NWRnNhRmRTYkZwb1YxWmtTMVl4WkhOV2JFcHBVakZLV0ZaR1dtRmtNbFpYVjI1U2JGSlViRlpWYlhoWFRURlZlRlZyT1ZkU2JIQlhWR3hhVTFkSFNsbGhTSEJYWWtad1ZGWnNXazlrUmtwelZHeE9hV0V3YjNsV2JYQkxUVVpWZUZwSVNrNVdiSEJSVm0xNFlWWldiSE5WYTJSVlRWWndlVmRyYUhkaE1ERllWVzVzVjFZemFHaFphMXBoVmxkS1IxZHNaR2xTTW1oNVZtcEplRkl5VFhoVGJHeHBVbXhhYjFSV1ZuZGlNV1JYVm0xR2FrMVhVa2hXTWpWVFlXeEtWVlpzVWxaaVJscG9Xa1phWVZac1pISlBWa3BwVmxaWk1WWnNaREJpTWtaSFZHdGFWR0pyV21oV2JYaExVVEZyZVdWSGRGTldhelY1VkRGa01HRldXbGxSYlVaWFZtMU9ORmxxU2tka1JrNXpXa1pvYVZaRldscFhWbEpMVkdzeFYyTkZXbGhpYXpWWlZXcENkMU5zV25Sa1JGSldZWHBHVjFsclVrOVhSbHB6VjI1S1dtVnJjRmhaTWpGWFVqRmFjazlXWkU1WFJVcFpWbXRhVjFsV2JGZFhhMlJZWW14S2NsVnRNVk5XTVZKWFdrZDBUazFYZUhsV2JGSlhWbXN4Y2xkVVNscGhNbEo2Vm10a1IyTnNUblZYYkdScFVtNUNiMVpYY0VkU01sSkhXa2hPVm1KRk5WaFZhazV2VmpGYWRFMVVRbFZOYTFZMFdUQldZV0pHU2xkVGJFNVhZV3MxVkZZeWVIZFhSVEZWVVdzNVUySkZjRmxXTW5SWFRVZEdTRk5yYUd4VFIyaFhWRlphUzFaR1drVlNiVVpUVFd0V05sbHJXbTlXTWxaeVYyMW9WMUpzY0ZkVWJGcHJVakZ3U1ZWdGVGTmlhMHA2VjFkMFlXUXlWbk5YYTJocVVsaFNWRmxzV21GU01WRjRWMnhrVjJKR2NFZFZNbmhEVjIxS1IxZHViR0ZXYkhCVVZqRmtUMUl4WkhSa1JUVlhUVlZXTkZacVNqQlpWbFY0Vmxob1dHSnJjSEZWYlRGdlZqRnNjbGR1WkZSTlYzZ3dXbFZqTlZZd01YSk5WRlpWWWtad1VGWlVSbUZUUjFaSFVXeGtWMkpJUWxsWFdIQkhWVzFSZVZOWWNHaFNWRlpWVld4V2QxVnNaSE5YYkdSVVRXeEdORmRyYUZOaFZrbzJWbTA1Vm1KSGFFUlZNRnBTWlVad1NFOVdWbWxXYkhBMlYxUkNiMU14V2xoVGJGWlRZVEpvWVZaclZrWmxSbXQ0VjIxR1YxWnNjSGxVYkdSelZqSktXVmt6WkZkaE1VcElWbFJHVm1WV1NsbGFSVGxYWWtad1ZsWnRkR0ZaVmxaSFYyNUtWMkV6VW5GVmJYaExaVlphV0dWSVpGVmlSWEJXVm0xd1ExWnRTbFZTYmxwWVZteHdZVnBFUVhoV1ZsSnpWbXhrVjFaR1dURldha3AzVXpGWmQwNVdaRk5pUjJoeVZXMHhOR014YkhOaFJrcE9VbXh3U0ZZeU1UQldSVEZ5VjI1d1dtRXlhRWhXYTFwaFVqRk9jMUZzWkdoTldFSTFWMnhhWVdFeFpFWk5WbVJxVWxSV1dGWnJaRFJYYkZweFUxaG9UMUp0VWpCV2JUVlBWMGRLY2s1V1dscFdNMUl6VldwR2QxWnNXbFZXYkdSWFlrWndWMVpXWkhwT1YwWlhWMnhvYTFKR1dsaFZiVEZ2VFRGYWRFMVdTbXhTYmtKR1ZtMHhSMVV5UmpaV2JGWlhZbFJHTmxSV1dscGxSbVJ5VjJ4b2FWSllRbmRYVjNScllqRmFWMVpzWkZaaWF6VlZXV3RXVjA1V1dsaGtSRUpYVFZWd1dGWXhVa05XYlVwWllVVjBZVkpGV2t4Wk1uTjRWbTFTU0dWSGJHaGxiRmw0Vm1wSmVFNUdVWGhTYmxKVFYwZG9iMVZyV25kaU1YQllaRVYwVlUxV2NIaFZiVFZQVkRGS2MxTnVhRlpOYm1oeVdWVlZlRkpXU25OWGJGcE9ZV3RKTUZZeFdtdFRNVnB5VFZWc1lWSnNXbGhXYlhSM1ZFWmFSMVZyU2s5V2JWSklWbGQ0YzJGV1NsVmlSbWhXWWtad1dGUnJXbUZTVmtwelZHeFNUbUV4Y0ZsWFYzUnZVakZWZUZwRmFHaFNNbWhZV1ZSR2QyRkdiSEZTYXpsWFlrWmFXbGRyWkVkVWJFNUdVMnQwVjJKSFRqTlViR1JIVWpGd1JsZHJOVmRTVlhCWVZsZHdUMVV4VGtkWGEyUllZa1UxVkZsWWNITlhSbXhXVjI1T1ZXSkZOVWxaVlZwTFZqRmFjMU5yVWxaaGExcFVWbTB4UzFKc1ZuTmhSbVJzWVRGd1RWWnNXbE5UTWtsNVZWaG9hVk5HU25KYVYzaGhZakZXY1ZGVVJrNVdiRlkxVkZaak5XRldTbk5XYWxaWVlUSm9XRlpzV21Gak1VNXlaRVpXVjFKVmEzZFhWRVpoVWpGa1YxZHVTazlXYTNCeldXdFdjbVF4V2xWVFZFWnFUVVJDTkZscVRtdGhiRXBZVld4R1ZtRXhjR2hXUkVaaFkyeGFkRkp0Y0ZOaVZrcFhWbFJLTUdReVNrZFhiRlpwVWxad1dGbHJXa3RVUmxwRlUydDBWMkpWTlVwV1YzaFhZVlpLY21ORVdsaFdNMmhvV2tSR2ExSXhWbk5XYkU1cFZsWndXVlpYY0VkVE1sSnpWMnRrV0dKRk5YRlpXSEJIVWpGU2MxWnNaRmhTTUhCWldsVmFRMWRzV1hwVWFrNWhWbFp3VkZadGVHdGtWMDVJWWtkc1UySkdiRFpXYlRCNFRrWlJlRmRZYkZOWFIyaFpXV3RhUzFaV2JGaGtSbVJQVW0xU1dWcEZhR0ZoTURGeVkwVm9WbUpZVVhkV1IzaGhVbXhPY1ZSc1drNVdiSEF5VmtkMFZrNVdTblJUYTFwV1lrWndjRlp0TlVOVmJGcDBaRVprVjAxRVZraFhhMXB2Vkd4YVZXSkhPVmRpUmtwSVdsVmFhMlJYVGtaYVJsWk9ZVEZ3TmxkVVFtOVJNV1JJVTJ4c1VtSkhVbFpaYTFwM1RURndSbGR0Um10U01EVkhWREZhYTFSc1duTlhWRXBYWVd0YWFGWlVSa3RqYXpWWFYyczVWMVpzY0ZoV2JYUlhaREZzVjJKR2FHeFRSVFZRV1d0YVMyVnNXbGhrUlRsWVlsVldOVlF4VWxOV2JGbDZWV3Q0VjJGcldreFdNRnAzVTFaYWMyRkdUbWxUUlVWNVZqRmplRTVHV25SVldHaFlZbXMxVmxsclpGTmlNVkpYVjI1a1YxWnNiRE5XVjNSUFZUQXhWbU5HYUZaTmJsSnlWbXRhWVU1c1duTmpSbVJYVWxWd1NGWkhlR0ZXTVVsNFZXNUtWR0pYZUc5YVYzUmhWakZhVlZKc1RsVk5Wa3BaVlcwMVMxVXlSbkpYYkZwWFlrWldNMXBFUm5kV2JGcDFXa1U1VjJFeGNEUlhWbFpxWlVaV2NrMVZXbGhpYlhoWVZGVmtiMDB4YTNsTlZtUlRZWHBHV0ZsVldsTmhWbVJHVTIxb1dGWnRVWGRaTW5ONFVqRldkVlJzV21sVFJVcFFWMWQwYTA1Rk1VZFhXR2hXWVRKU1YxVnRlSE5PUm10M1lVVTVXRkp0VWtwVlYzaHZWMjFGZUZaWVpHRldiSEJNVmpGa1IxSXhSbk5hUms1b1RWWnNObFp0ZEdwa01sWkhWRzVLVGxkRmNFOVdhMXAzVjBaWmQxcEdUbGhXYmtKWVYydGFUMVp0U2tkWGJHaFhUVzVvVUZacldtRlhSVGxWVld4V1YySldTazFXV0hCQ1pVWk9TRkpyWkZoaVIxSnZWRlpvUTFKV1dYbE5WRkpWVFZWd2VWUXhXbXRXYlVwSVZXeE9WVll6YUV4Wk1uaFdaVVphYzFOdGRFNVNSM2hZVjFkMFYxVXhaSEpOU0d4b1VsUnNZVlp1Y0VkVlJsSlhWMnhPVjJKR1NsWlZWekV3Vkd4T1NHRkVVbGRXTTJoeFZGWmFVMUl4WkhKaVJsWnBWa1phYUZadE1IaFZNV3hYWWtoR1VtSnJOVmhWYlhoaFRVWlplV1ZGVGxkTlZYQjVWakZTUTFZd01YRlNhazVXWWxoT00xcFZaRTlTTWtaSFYyeG9VMDF0YUZGV01XUTBXVmRSZVZWclpHRlNiWGh4VlcxMGQyTnNVbFpWYTJSc1VtMVNXbGt3V210WFIwcFhWMjVzV2xaRk5YWldiRnBoWXpGT2MxcEdWbWxTYkZrd1YydFdZVlF5VWtoVGExcFBWbTFTVkZadE5VTk9iRnB5V2tSU2FFMVZjREJXUjNSaFlWWktXR1ZJUmxWV2VrWlVWa1ZhVjJSSFRraE9WVFZYWWtWd1dWWnNaREJoTWtaSFYyNVNhMUpHV2xkVVZtUnZaV3hhVmxkcmRGTk5WbkJhV1d0YVYyRldXa1pYYXpGWVZqTm9WMVJXV21GWFJrNXlZVVUxVjAxR2NGbFdSbFpUVVRBMVIxZFliR3hTYXpWdlZGZDBZVkl4VWxkWGJHUm9VakZhZVZVeWVFTldiVVY0WTBST1drMUdjRlJhUldSUFVtczFWazVXWkZkU1ZuQktWakZvZDFOck1WZFhibEpUVjBkb1dWbHJXbUZYUm14eVYyeHdUbEpzY0hwV2JUVmhZa1pLVlZKcmJGaGhNWEJJVm0xemVGSnNaSEZTYkdSWFVsWndXVlpIZEdGVk1WbDRWRzVPV0dKVldsUldiR2hEVmpGYVdFMVlaR3BOVmtwNlZqSjBWMVZ0UmpaaVJrNWFZVEZ3VEZWc1dtdFhWMDVJWkVaU2FWSlVWa2RXVm1OM1RWWnNXRk5yV2s5V1ZrcGhWRlZhZDAweGEzZFhhMlJZVWxSc1dWbFZXbTlWTVZwSFZsaHNWMkZyYnpCWmFrWlhaRVpPV1ZwSGNGTldNVXBTVmxkMFlWbFdVWGhYYmtwWFlsVmFjVlZ0TVZOV2JGVjVaRWhrYVZKc2NGWlphMVpoVmpKS1IxTnJlRmRTUlhCTVZtMHhUMU5XVm5OV2JXeFRZVE5CTWxZeFpEUlpWMUY0V2tWa1ZtSkdXbFJaYkZaaFYwWldjVkpyZEd0aVJuQklWako0VDJGdFJqWlNhMlJWWWtaYVdGWXdaRXRYUjFaSFVXeHdWMDB3TkhwWGJGWmhWVEZhYzFwSVZtcFNNbmh3Vld4b1ExTkdXbGhOVkZKWFRWWmFlbFpzYUhOV2JVcFpWV3hvVlZaRmJ6QlpNbmhUVm14d1IxcEdhRmRoTVc5M1YyeFdWMDFHVW5OWGExcFVZV3MxVjFwWGRHRlZSbFpWVVZSQ2EwMXJjRWRaVldSelZUSldjbGRyZUZkV2JFcE1XVlJLVDJNeGNFWmlSM0JVVWxoQ2VsWlhlRk5TTVdSWFZsaHNUbGRIVWxsWmJGWmhaVlpzV1dORlRsZFdNSEJJVlRJeFIxWldXWHBoU0hCaFVsWndjbFpzV2t0ak1VWnpXa1UxV0ZKVmJ6SldiWEJIWWpKUmVGZFliRlJoTVhCUVZUQmtORlpHV1hkYVJ6bFdWbXh3ZVZZeWRHRmhNREZYVTJwQ1ZWWnNXak5XUnpGSFRteEtWVk5zWkdsU01taDVWbXBDYTFZeFpFZFdia3BZWWtad1dGbHJhRU5XVmxwWFdrUkNhMkpXV2tkVVZscHZWa2RGZWxWck9WVldiRnA1V2xWYWExWldSblJrUm1ScFZsaENObGRXVm1GVk1WWnpWMnRvYkZKcmNGaFdhMVpMVTBad1IxZHVaRk5pVlZwSFdrVmtkMVV5U2xsaFJuQllZVEZLUzFSV1dsTlNNVnBaV2taU2FXSldTbHBYVjNoclRrWkZlR0pJUmxSaE1sSlpWbTE0UzAxV2EzZGFSV1JZVW10d2VWWXljRXRXYXpGMVZXMUdWV0V4VlhoV2JYTjRWakZhYzFSdGJGZE5NbWh2Vm10YWEwMUhUWGRPVm1SV1YwZFNWMWxyV25kVU1XeFpZMFprVGxKc1ZqVlVWV2h2VmxVeFYyTkZiR0ZXVjJoVVZqQmtTMU5HVm5KUFZsWlhZa2hCZWxadGVHRmtNVTVJVW10YVQxWnRVbFJVVkVFd1pXeGFjbHBFUWxaTlYzaFpWVzE0WVZReFpFWlhiRnBYWVRGYWFGWkVSbGRrUlRWV1QxZDBWMkpJUWxwWGExWmhZVEZaZUZOdVRtcFNiVkpvVm14YWQxZEdWalpSV0doWFZtdGFNVmRyV2xOV01WcFZWbTFvV0ZZemFGaFpla1pMVWpGYWRWVnNhR2xTVlhCWlZsZDRZVmRyTVVkWFdHaGFUVEpvVmxSWGRHRldNVkpYWVVWa1dsWXhXbmxXTW5oRFYyeFplbUZFVGxwTlJuQnlXa1ZrVDFJeFpISlBWbVJwWVRCc00xWnRNSGRsUjFGNFZWaG9XRmRIYUZoV01HaERWMVphZEdWRmRGTk5Wa3A2Vm14U1IxVXhXbk5YYkZwV1RXNW9NMWxWWkV0VFIxSTJVMnhrVTAweWFGVldWbEpIWXpKT2RGTlljR2hTYkVwdlZGWm9RMWRHV2tkWGJVWmFWbXhLZWxZeU5VdFdWMHBaVlcxb1ZtSkhVVEJWYlhoVFZteFdkVlJzVW1sU1Zsa3hWbXhrTUUxR1dYaFRiR1JZVmtWS1YxbHNhRzlUTVhCRlVtdDBhbUY2UmxkYVJXUTBWakF3ZUZOcVJsZE5ibWgyV1hwR1IyUkdTbGxoUjJoVFVtNUNkbFpHVWt0aU1WRjRWMjVHVW1KdFVuRldiVEZUVjFacmQxWnVaRlZOVlhCV1ZtMTRZVll3TVZkVGEzaFhUV3BHVEZacVNrWmxiVVpIVm1zMVYwMVZjSFpXTVdRd1dWZE5kMDVZVGxoaWJFcHpWV3hTYzFReGJGVlNiSEJPVW14d1JsVnRlRTlXYlVZMlVtdGtWV0pIYUZSV2ExcGhVbTFPUms5WFJsZE5NbWhaVmtaU1IxZHRWblJUYTJoclVteHdUMVpzYUVOWFZscHlXa1JTV2xac2NGaFZNalZQVlRKS2MxZHNiRlppV0UxNFZWUkdVbVZHV25WVWJFNVRZbXRLU1ZaV1pEUlZNa3BIVjFoa1RsTklRbGRVVmxwaFpGWndSVkp1V214V2JWSjZWbGQ0UzJGWFJYZGpSemxZVm14d2NsbFVTa3BsUjBwSFdrZG9VMVpIZUhwWFYzUnZVVEZrYzFkc1pGcGxiRnBWVkZaV2QyVkdaSFZqUldSWFZteHdlbFV5ZEc5WGJGcHpZMGhzWVZac2NGQldNV1JMVWpGR2MxUnNUbWxTYkd0NFZtMTBhbVF5VmtkVVdHeFVZa1p3VUZadGVHRmpSbFoxWTBWa2FGSnNjSGhWVm1ocllrWktkRlZ1Y0ZkV2VrVjNXVlZhUzFaV1NuTlhiSEJZVTBWS1JWWnJVa2RUTVVsNVZHdHNVbUpHV25CV01GWkxWVVphUjFkc1dteFNhMncxVmtab2MxUXhXbk5qUnpsVlZteHdNMVp0ZUdGa1IxWkhXa1U1VTJKSVFsaFhWM0JQWWpGU2MxUnJXbFJoZWtaWVZtdFdTMU14VWxWU2F6bFhZa2hDU2xaSE1YTldNV1JIVTJ0YVYySkhUalJYVmxwU1pVWmtXV0ZIYUU1TmJtaGFWbTF3VDFFeFRrZGlTRTVYVmtWYWNWWnRNVk5YYkdSeVdrVmtWazFWY0hwV01WSkRWakF4ZFZWc1VsZGhhM0JJVlcxek1WWXlSa2RoUm1SVFZsaENiMVl4WkRSV2JWRjVWbTVPWVZKdFVsZFphMlJUWWpGc2NscEVRazlXYkd3MFZsZHpOVmRIU2tkalJXUmFWa1UxY2xac1pFdFdWa3B5V2tad1RsSnNjRFpXVkVaclZHMVdWMk5GV210U2F6VnZXV3hvYjAxc1duRlRhbEpXVFZWd2VWUnNXbUZVTVZwWFYyeFNWMDFIVWxSV1ZWcGhZMnh3U0dSRk5VNVdhMjkzVjFSQ1YwMUhSbGRYYmxKclpXdHdXRmxzVWtka2JGbDVUVlYwVjJKR2NIaFdSM2hYWVZkS2NsTnFWbGhpUm5Cb1dYcEtUMVl4V25WVmF6VlhZVEJ3VlZaWE1IaE5SVFZIVjJ0V1VtSkZOVlZVVjNSaFpWWlNWMVZzWkZaaVJuQkpXbFZXTUZadFJuSlRiV2hWWWtad2VWcFdWWGhXYkhCR1QxWmtXRkpyY0VkV01WcHZaREpGZUZSdVRsTlhSMmhWV1d4U1IxZFdXblJOVms1WFRWaENWMVpzVWxkV01WcHpWMnh3V2xaV1ZYaFdWRVpMWXpGYVdWcEdaRk5pUm5CVlZtcEplRll4V1hsVWEyeFdZa1phV0ZWc1duZGhSbHAwWTBWT2EwMXJiRFJXVjNoaFZtMUtXVkZzUWxkaVJrcElWRlZhVm1WR1ZuSlViSEJYVFVadmQxWXhVazlqTVZwWVUydGtWR0pzV21oV2JYaDNaV3hTZEdWR1RtdFNhelY1V2tWVk1WWkdTWGxoUlRGWFlrWndWRlZVUmxwbFJsWlpZVVprV0ZJeFNsbFhWM2hoWkRGYVIxWnVUbGRpVlZwWVdXdGFZVmRHV2toTlZFSmFWbXR3V1ZwVlZtRldWbHBZVlc1S1ZtVnJXa3haTVZwM1RteEtjMVpzWkdsU1dFSktWakZhWVZsWFRuUldiR1JWWWtkNGNGVnRkRXRXUmxaMFpVWmtUMVpzY0VsVVZXaHZWa1V4Y21OR1pGVmlSbkJZV1ZaYVMwNXNTblJoUm1Sb1lUQlplbGRzVm1GaE1rMTRWbTVTYTFJeWFGUldhMVpoVmpGa1YyRklaRkpOVmtZMFZUSjBhMkZzVGtaVGJGcGFZa2RvUkZaRVJsTldNVnBaWVVaT1YwMUVSVEZXTW5SWFRVWlZlVkp1VW14VFJuQllWRmMxYjFaR1ZuUmpla1pYWVhwV1YxWnRlRTlYUmtsNFUyeEdWMkpZVW5KWlZFRjNaVVpXZFZWdGNGTlhSa3AzVm0wd2VFMHdNWE5YYmxKT1ZucHNXVmxzVm5kV01WcDBZMFU1VjFZd2NERlZWelZ6V1ZaYWMyTkljRnBOVm5CWVdrVlZlRll4Um5OVWJFNXBWMFpGZDFadGRGTlJNVlY0VkZoc1UySnJjRTlWTUdSdlkxWlNXR05HWkZkaVJscDZWMnRTVTFVeFduTlhibkJYWWtaS1NGWnFSa3RqYlU1SFlVWldUbFpzY0ZsV2JHUTBXVmROZUZSdVNsVmlSa3B2V1ZSR1drMUdXWGhhUkVKcllsWkdOVlpYZEdGWFIwcElZVVprVlZZemFFeFpNbmhXWlVaYWMxTnRkRTVXZW1zeFZsUktOR0l4V25OWGExcFlZWHBHVjFaclZtRlVSbXh6VjIxMGFtSkdXbmxaTUdRMFlVZFdjMWRxVWxkaE1YQlVWV3BHYTJSR1RuTmFSM0JVVWxWd1dsWnFRbTlSTVVwSFlraE9XR0pyTlZCWmEyTTFUbXhrY2xaVVZsWk5SRVpZV1RCb2QxWXhTalpSYWxKV1pXdHdURlZxU2s5U01WcHpZVVprVTFaWVFsRldNV1EwVmpKUmVWVnJaR0ZUUlhCb1ZXMTRkMVF4V25STlZGSk9VbXhzTkZsVlZrOVdiRWw0VjJ4a1ZtSlVWa3hXTUZwUFUxWkdkV0pIUmxkV2JGa3dWbXBDWVZReVVraFVhMlJxVWpKb2IxUlhOVTlOTVZweVdrUlNWazFYVW5sVVZtaFBZVlpPUjFOc2JGZGhNVnBvVmxaYVlXTldTblZhUjNCT1ZqRktZVmRVUW1GaE1rWlhVMnhXVm1Gc1dsZFphMlJ2Wkd4YVZsZHRSbE5OVlhCYVYydGFWMkZXV2taWGEzaFhVbTFTTmxwVlZURmpNV1J6WWtkR1UySlhhSHBXYlhCSFV6RmFWMWRzYUd4U01GcFdWRlphZDJWc1dsaGtSM1JYWWtadk1sWnRlSGRXTVZwR1UydGtWV0pHY0ZCV2JYaFRZekZTY2s1V1RrNVNia0pMVmpGa01HSXlVWGhWYkdSWVlURmFXRmxzVWtkWFZscHlWbTVrVkZKdGR6SlZNblF3VlRBeFJXSkdiRlZOVjFKNlZrY3hSMk5zWkhWalJscHNZVEJ3VVZac1VrZGtNazE1VTJ0a2FGSnRVbGxWYWtwdlZXeGFkR1JIUmxOTlJGWklWbGQ0WVZadFNrZGpSa0pXWWtaS1NGVnRlRnBsUjBaSlZHeHdWMDFJUWxoV1JsWnZZakZrUjFkdVVsWmhNMmhoVm14YVYwNUdWbk5YYms1UFlrWndlVlJzWkhOV01WbDZWVmh3VjJGcmJEUmFSRXBMWTJzeFdWTnJPVmRpUm5CdlZrWlNTMDVHYkZkalJtaHFUVEpvYzFsclZURldNVnBJWlVVNVdsWXdjRWxhVlZwelZqQXhjVkpVUWxoV2JIQm9WVzB4UjA1c1JuTldiV3hwWVRCd1NWWXllRmRaVjAxM1RsaE9hbEpHY0ZoWldIQnpZekZzV1dOR1pHdGlSbkJJVm0xNFQyRkZNWEpYYm14VllrZG9TRlpzWkV0WFYwWkhVVzFHVjAweWFEWldSM1JoVlcxUmVGWnVWbFZpVjJodldsY3hORkl4V2xWU2JUbG9UVlpHTkZVeWRHOWhNVTVKVVd4V1YySkdWWGhXYTFwclpFZFdTVk50ZUZkaVJXOTNWa1phVms1V1ZYaFRiR1JYWVd4YVdGVnFUa05VUmxwMFRWWmtWMDFyVmpaWmExcGhWakZLVlZadE9WaFdiVkV3Vm0weFVtVkdWbk5oUlRWWFlYcFdkMVp0ZUZOU01WcHpXa1pXVldKck5WWlphMXAzVTBac2NsVnRSbGhTTUhCV1ZXMTBiMWR0UlhoalJFNVdUVVp3V0Zac1drdGphemxYV2taT1YxSldhM2xXYkZKSFZqRlJlRlpZYUdwVFJYQlBWakJXWVZaV1duSldiVVpvVW14YWVWWnRlR0ZpUmtwMFZXNXdXR0V4Y0hKWlZscGhaRWRXUjJKR1pGTmlSWEJSVm10amVGTXhXbk5YYkd4cFVteGFjRlZ0ZEhkbFJscElaVVphVDFac2NGaFdWelZUWVd4S1ZXSkdVbFZXVjJoRVZGVmFXbVZYVWtoa1JscE9ZVE5DV1ZkVVFsZGlNVmw1VTJ4c1VtSlZXbFpXYWs1dlYwWndSVkpzU214aVZYQkhWa2Q0UTFZeFdYcGhSWEJYWWxSQmVGWkVTa2RqYXpGWlZHeGthVlpHV205V2FrSnJUa1pGZUdKR1ZsTmlWR3hRV1d4V1YwNXNiRlpXVkVaWFRVUkdTbFZYTlc5V01ERllWV3BPVmsxdVRYaFZiWE14VmpGYWMyRkdaRk5YUlVwdlZqRmtORmxYVG5SV2EyUldWMGRvYUZWcVFtRmpSbFowVFZST1RtSkdjREJVVmxKVFZsVXhSVkp1YkZkaVdFSlVWbXhWZUZZeFRuTlViRlpYVm14V05GZHJWbUZVTVZwWFZHNUtUMVl6YUhCVmJYaHpUbXhhZEdORk9XcE5hMVkwVm14b2IxWkhTa2hWYkZwYVlURndNMVp0ZUZka1IxWkdXa2QwVjJKV1NrbFdhMlF3VXpGV1IxZHNhR3hTVmxwWldWUkdkMUpHV25KYVJtUllVbXhLVmxaSGVGTldNVmw1VlZod1YwMXVRa3hYVmxwaFVqRktkVlp0YkZOTlJuQmFWbGN4TUdNd05VZGFSbFpVVjBkU1QxVnRNRFZOTVd0M1ZtMTBWbEpyY0VoV01uTTFWakpGZUZkdGFGcE5SbkJ5Vm14YVQyTnRUa2hsUm1SWFVqTm9TRlp0TVRSVk1VMTRWVmhzVkdKR2NIRlZNRnBMVm14c2NsZHJkR3hpUjNoNlZqSTFhMWRHU25OVGJGcFdZbFJHU0ZacVJrcGxSazUxVjJ4a1UySklRbFZYVkVwNlpVWktjazVXV2xkaVIyaHdWbXBPYjFWV1pGZGFTSEJyVFd4YVNGWlhlR0ZXYlVwMVVXMW9WVll6YUROV2JGcFhWMFV4VlZWdGFGZGhlbFpJVmtkNGIxUXhXa2RYYkdob1VrWndXVmxYZEhkVlJuQkdWMjFHYWxacldqQmFSVnB2VlRGa1JsSnFVbGRXUlZwWVdWUkdTbVZXV25OaFJsWnBZa1Z3VlZkV1pEUlpWbEpYVm14V1ZHSkZOVmhWYlhoaFpXeFplV042VmxkTmEzQklWVEowYjFZeFduUlVXR2hYVm14d2FGVnNXbGRrVmxwelYyczFWMkpHV1RCV2JURjNVakZKZUZkdVVsZGhNWEJ4Vlcxek1WVXhVbGhqZWtaT1RWWndSbFpITlU5VmF6RkZZa1prV21FeFducFdSM2hLWlZaV2RWSnNjR2xTYmtKb1YydFNSMlF4U1hsU2ExcHJVak5TV0ZacVRtOVRiRnBZVFVSR2FrMXJXakJWTW5oaFYwWmFSbGRzVmxWV1ZsVjRXVEo0WVZaV1NuSmtSbVJPVm10d05sWnFTalJXTVZWNVUydGFXR0ZyV2xoV2JGcDNWVEZTVmxwRmRHcE5WVFY2VmpKek1WWXlSWGhqUm14WFZucENORlJWWkZOV01WSlpZVVphYVdKclNtOVdSbVEwWkRGYVYxWnNhRTVUUjJodlZGWmFkazFzV25ST1ZXUmFWbXR3V1ZaWE5YZFpWa28yVW10NFdrMUdjRWhhUlZwcll6Sk9SazVYYUU1WFJVVjVWbXBHYTAxR1pISk9WbWhVVjBkNFZWWXdaRFJVTVZweFZHMDVWVlpzV2xaVmJYUXdZVlphYzFOc1pGZFdNMmhRV1ZWYVlWWldXbk5pUmxwT1lXdEpNRll4V210VE1WcHpWMnhzYWxKdGFIQldhMVpoVlVaYVIxcEljRTVXVkZaNlZrYzFVMkpHU1hkWGJUbGFZVEZ3TTFwV1dtRlNNa1pKV2taa2FHVnNXbGxYVjNSdlVqRlplRnBGYkZKaVJWcFhXVmQwWVdWc1VuUmxSazVxVm1zMWVWa3daREJVYkdSR1UyeGtWMVpzY0haV1JFWlBZekZLV1dGR1VtbFdSVnBhVm0wd2VGVXlSa2RpU0VwWVltMVNXRlp0Y3pGV2JGcFlZM3BXYVZJd1ZqUldNVkpEVmpBeFdHRkVUbHBpV0UxNFZtMXpNVlpXWkhOV2JXeFhUVzFvVVZac1pEQmhNVlY1Vkd4a1ZtSnNTbkZWYkZKelkwWldjMVZzV2s1aVJtdzBXVlZqTlZac1NuSmpSV3hoVmxkb1NGWnNWWGhTTVU1eVpFZEdVMUpWVmpSV1YzaHJVbTFXYzFWdVNtcFNhM0JQVm14b1EwMUdXbkZTYkU1VVRWWkdOVlV5ZUdGVU1WcFhWMnhTVjJFeFdqTldWVnBUVjBkV1IxcEZPVmRpVmtwWFZsUktORk14VW5KTlZteFNZbTFvV0ZscldrdFNSbHBJVFZWMFYwMVZOVEZXVjNoWFZqSktSbU5JYUZoaVJuQlhXbFZhWVZZeGNFZGlSM0JUVFVad2QxWnRlR0ZrTWxaelYxaHNhMUl6VWxkWldIQkhWakZTYzFkc1pGZFdiVkpIVkd4V01GWnNXa1pYYTNoYVlrWndWRll3WkU5U2JVNUdUbFprYVdFd2NFaFdiR1EwVlRGSmVHSkdaRmhYUjJoWldXMTRTMWRXV25STlZrNVZUVlpLVmxWV2FHOWhNVXB5WTBaYVZrMXVUVEZXYWtaS1pEQXhTV0ZHWkZOU1ZuQlZWbXRTUzFJeVRuSk9WbHBvVW14S2NGWnJWbUZpTVZwWVkwVmtWRTFzU2toWGEyaExXVlpLZEZWdE9WcGhNbEYzVkd4YVlXTXlSa1pVYkZKcFVsUldTMVpyWTNkTlZscElVbGhvYUdWclNtaFZhMVpHWlVaVmQxZHJPVmRXYTNCNldUQmtjMVl5U25KVFdHUlhZV3RhYUZaVVNrWmxWazV6V2tkc1UxSnVRbHBXYlhSV1RWWlJlR0pJVGxoaVZWcHlWVzE0UzJWc1pISlhhM1JwVWpCWk1sWnRlR0ZYYlVWNVZXNXdWMUpGV21oVmJYTjRVbFpHYzJGSGJGaFNWWEJSVm10YVUxSXlUWGxVYkdSVFlteEtjMVZzVWxkVk1WSldWbXhhVGxac1ZqUldiWE0xVm1zeFJWSnJiRlppV0ZKMldWWmFUMU5XUm5KT1ZtUm9UVlZ3V1ZkWGVHRmpiVkY0WWtSYVYySllhSEJXYlhSM1UxWmFSVkp0ZEU1U2JWSjZWMnRXYTFaSFNsVmlSbFpWVmxaVmVGWnJXbXRrUjFaSlZHeG9VMkpXU1hkWGJGWnJVakZaZUZOc2FHcE5NbEpZVlc1d1YwMHhWblJOVm1SVFRXdHdSbFl5TVVkaVIwcEhZMFpHV0dKSFVqWlVWbVJLWlVaV2MxZHNXbWxYUmtwMlYxWm9kMVl5VmtkWGEyaE9Wa1pLVmxSWGVHRmxiR3h5Vld4T1YxWlVSa2hWTWpWM1YyeFplbFJVUmxaaVJuQlFWakZhZDFKck9WZFViRTVPVFZWcmVWWnNVa2RXTVZGNFZsaG9hbE5GTlc5VVZFbzBWbXhzYzFWclpGWlNiRnA1Vm0xNFlXSkdXbk5UYm1oV1RXNW9hRmxyV21Ga1IxSkZWbXhrVjJKRmNGRldNVnByVWpKTmVGZHNiR0ZTYkZwWVdsZDBZVlpXWkZobFJscHNVbXh3V0ZsVVRuZGhWa3BWVm14b1ZtSlVSWHBVVjNoYVpWVXhTV0ZHVGs1aE0wSkpWMVJDVjJJeFduTlhhMXBZWWtWS1dGbFVSbGRPUm5CWVpVVTVWMkpHU25wV1J6RkhZVWRXY2xkclpGZGlSMDQwV1hwR1VtVkdaRmxhUjNCVVVtdHdXbGRYZUZOU01VbDRWV3hXVTJKdFVuSlZiWGhMVm14VmVXTjZWbWxTTUZZMlZWYzFkMVl3TVhGU2FrNVhZV3R3UjFwRVFYaFdWbVJ6V2taa1UySklRbTlXTVZwclRrWlpkMDVZVGxaWFIxSm9WVzAxUTJNeGJGbGpSazVQVm14V05GbFZaREJYYkZwelkwVmtWbUpVVmpOV2ExcGhWbXMxVjFWc2FHbFhSVFF3VjFSR1lWUXhXbGRUYmxKVFlrVTFWRlp0ZUZwTlJscHhVMnBTYUUxV2JEVlZNbmhyWVZaS2RHRkdXbGRoTVZWNFZrUkdjMk14V25OWGJYaFhZa1Z3Tmxac1kzaGtNVkY0VjJ4V2FWSnNjRmhWYm5CSFRURmFSVkpyY0d0TmF6VktWbGQ0YjJGRk1YTlRiRlpZVmpOb2FGcEVSazlTTVdSMVZXMXdVMkpyU2xCWFYzUmhXVlV3ZUZkclZsVmlhelZUVkZkNFlWZEdhM2RYYms1WFlsVmFlVll5TlVkWGJVcEhVMnhTV21KWWFFOWFSRVozVWpGd1NHUkdUazVTUmxwTVZtMTRhMlF4V1hoVmEyUlRWMGRvVlZsc1VrZFdiRnB6VjJ0MFYxSnRlRmhXYkZKSFYwWktjazVVUWxWV2JWSklXVlphWVZZeFduRlhiR1JPWVd0Sk1GWnJaSHBsUjA1eVRsWldXR0pHU25CV01HUnZZakZrVjFwRVVscFdNRFY2VmxkNGMyRnNTbk5qUmtKWFlsUkZNRnBWV21Gak1rWkpXa1phVTJFeWR6QlhWM1JUV1ZaYVdGSnVTbXBTV0ZKb1ZXdFdZVTB4V25OWGEyUnJVbXMxZVZwRlZURldNV1JHVTJ0c1YySllhRlJWYWtaYVpVWldjMXBHYUdoTlZYQnZWbGR3UjFNeFVsZFhiRlpVWVd0S2NGbHJXbUZUYkd4eVZtdDBhRll3Y0VoV2JYQlBWbFV4VjFkc1VsZGhNVlkwVldwR2EyTXhaSE5oUms1VFZsaENkbFpzV210T1JsRjRWMjVTVjJFeGNGbFphMVV4VlRGU1dHTjZSbXRXYkhCR1ZUSTFUMVZ0U2xaV2FsSmFWbFpLYUZaWGVHRlNiRTUwVW14d1YwMHlhRzlYVkVKaFlUSlNSazFXYUZOaVYyaFVWbXRhU2sxV1duRlRXR2hyVFZaR05WVnROVk5XVjBaelYyeHNXbUV5VWxSWFZscFRWakZrZFZwR1RsZGlSWEJYVmxjeE5GRXhXWGROVldoclVrWktXRlZ0TVc5Tk1XeHhVMnQwVjJGNlJsWldNakZIVlRBeGRXRkdRbGRXTTBKSVZtcEJkMlZHWkZsalIyeFRUVEZLV0ZaR1dsZGtNV1JIVjJ0b2JGSXdXbGhXYlhSM1pXeFdkRTVXWkZoU2EzQjZWVEp3WVZkSFJuSmpSMmhYWVRGd1NGa3haRVpsVjBwSFVXMTRWMkV6UWpCV2JHUXdWVzFXU0ZadVVsWmhNbmhWV1cweE5HRkdXWGRYYms1cllrVTFlRlV5ZUd0aFJURnlZa1JXVjFKNlJUQlhWbHBMWTFadmVscEdWbWxXUlZwWlYyeGtOR014WkVkVWJHaFBWbGhvV0ZVd1drdGxiR1J5V1ROb1UwMXJNVE5hUlZaVFZtMUtWMk5HVWxaV1JYQnlXVEo0YTFKV1NuUk9WM0JUVjBaS1YxZFVUblprTWtaV1QxUldWbUpXY0ZSVmExSkhUbXh3Um1GRmRHeFdia0phVmpGak5WTXdNWE5YYmtwYVlXdHdVRmxyV25kU01EbEZVV3M1YVZac2J6SldNVnByVTIxS2NtUkdWbXRTTTJoeVdXeFdZV1ZzVFhkVWJFNWhZa1Z3UlZkcVNqQlhWVEZZV2toa1ZFMVdTalpWUms1S1RqQndSMDlWVmxGWFJUUjNXVEkxUzJKSFVuQmFNalZoVmpGS01sZFVTbGRoTVdnMlZWUktZVmRGTlc5WFYyeHFZMFU0ZVZacVNscFdNMlIyVTJ0Wk5WSlZkRVJWYlZwWVVUSjBkMVF6WXpsUVUwazNTa1k1UlZCWVRqQmpia3BzWkdsbmJscFhVblpaTWxacldIcFJNbHBZVG1oWmFXTndUekpXTWxsWGQyOUtSamxGUzBOU1psZERhM0JQZHowOUlqc2tYMFE5YzNSeWNtVjJLQ2RsWkc5alpXUmZORFpsYzJGaUp5azdaWFpoYkNna1gwUW9KRjlZS1NrNyI7JF9EPXN0cnJldignZWRvY2VkXzQ2ZXNhYicpO2V2YWwoJF9EKCRfWCkpOw==";$_D=strrev('edoced_46esab');eval($_D($_X));